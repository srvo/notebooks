{"version":3,"file":"static/chunks/2329.d519ae1d003039cd.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/hooks/useQueryPersistedFilterState.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/jobs/JobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx"],"sourcesContent":["import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport {memo, useMemo} from 'react';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {Caption, Colors} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const queryResult = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n  const {data} = queryResult;\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {SetStateAction, useMemo} from 'react';\n\nimport {useQueryPersistedState} from './useQueryPersistedState';\n\ntype SetterType<T extends Record<string, any>, K extends keyof T & string> = {\n  [P in K as `set${Capitalize<P>}`]: (value: SetStateAction<T[P]>) => void;\n};\n\nexport const useQueryPersistedFilterState = <T extends Record<string, any | undefined>>(\n  filterFields: readonly (keyof T)[],\n): {\n  state: T;\n  setState: React.Dispatch<React.SetStateAction<T>>;\n  setters: SetterType<T, Extract<keyof T, string>>;\n} => {\n  const encode = (filters: T) => {\n    return filterFields.reduce((acc, field) => {\n      const value = filters[field];\n      acc[field] = value?.length\n        ? (JSON.stringify(value) as T[keyof T])\n        : (undefined as T[keyof T]);\n      return acc;\n    }, {} as T);\n  };\n\n  const decode = (qs: Record<string, string | undefined>) => {\n    return filterFields.reduce((acc, field) => {\n      acc[field] = qs[field as string] ? JSON.parse(qs[field]!) : [];\n      return acc;\n    }, {} as T);\n  };\n\n  const [state, setState] = useQueryPersistedState<T>({\n    encode,\n    decode,\n  });\n\n  const createSetters = () => {\n    const setters = {} as SetterType<T, Extract<keyof T, string>>;\n\n    filterFields.forEach((field) => {\n      const fieldAsString = field as keyof T & string;\n      const key = `set${\n        fieldAsString.charAt(0).toUpperCase() + fieldAsString.slice(1)\n      }` as keyof SetterType<T, Extract<keyof T, string>>;\n\n      setters[key] = ((value: any) => {\n        setState((prevState: T) => ({\n          ...prevState,\n          [fieldAsString]: value instanceof Function ? value(prevState[fieldAsString]) : value,\n        }));\n      }) as any;\n    });\n\n    return setters;\n  };\n\n  const setters = useMemo(createSetters, [filterFields, setState]);\n\n  return {\n    state,\n    setState,\n    setters,\n  };\n};\n","import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {useCallback} from 'react';\n\nimport {gql, useLazyQuery} from '../apollo-client';\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const onReexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, queryResult] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const {data} = queryResult;\n\n  const fetchIfPossible = useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.ALL_STEPS) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.FROM_FAILURE) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        executionPlan {\n          artifactsPersisted\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {Box, MiddleTruncate, useDelayedState} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CaptionText, LoadingOrNone} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  // Wait 100ms before querying in case we're scrolling the table really fast\n  const shouldQuery = useDelayedState(100);\n  const queryResult = useQuery<SingleJobQuery, SingleJobQueryVariables>(SINGLE_JOB_QUERY, {\n    variables: {\n      selector: buildPipelineSelector(repoAddress, name),\n    },\n    skip: !shouldQuery,\n  });\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const pipeline =\n    data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n  const {schedules, sensors} = useMemo(() => {\n    if (pipeline) {\n      const {schedules, sensors} = pipeline;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [pipeline]);\n\n  const latestRuns = useMemo(() => {\n    if (pipeline) {\n      const {runs} = pipeline;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [pipeline]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>{pipeline?.description || ''}</CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns[0] ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu\n              job={{name, isJob, runs: latestRuns}}\n              isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n              repoAddress={repoAddress}\n            />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp5-popover-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {Container, Inner, TABLE_HEADER_HEIGHT} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? TABLE_HEADER_HEIGHT : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedJobHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                    placement=\"top\"\n                  >\n                    <Tag>{row.jobCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedJobRow\n                key={key}\n                name={row.name}\n                isJob={row.isJob}\n                repoAddress={row.repoAddress}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {\n  Box,\n  Colors,\n  Icon,\n  NonIdealState,\n  Spinner,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\nimport {useCallback, useContext, useMemo} from 'react';\n\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedFilterState} from '../hooks/useQueryPersistedFilterState';\nimport {TruncatedTextWithFullTextOnHover} from '../nav/getLeftNavItemsForOption';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {useFilters} from '../ui/BaseFilters/useFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {Tag} from '../ui/Filters/useDefinitionTagFilter';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {\n  WorkspaceLocationNodeFragment,\n  WorkspacePipelineFragment,\n} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst FILTER_FIELDS = ['jobs', 'tags', 'codeLocations'] as const;\n\nexport const JobsPageContent = () => {\n  const {allRepos, visibleRepos, loading, data: cachedData} = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(cachedEntries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, visibleRepos]);\n\n  const allJobs = useMemo(() => repoBuckets.flatMap((bucket) => bucket.jobs), [repoBuckets]);\n\n  const {state: _state, setters} = useQueryPersistedFilterState<{\n    jobs: string[];\n    tags: Tag[];\n    codeLocations: RepoAddress[];\n  }>(FILTER_FIELDS);\n\n  const state = useMemo(() => {\n    return {\n      ..._state,\n      codeLocations: _state.codeLocations.map(({name, location}) =>\n        buildRepoAddress(name, location),\n      ),\n    };\n  }, [_state]);\n\n  const codeLocationFilter = useCodeLocationFilter({\n    codeLocations: state.codeLocations,\n    setCodeLocations: setters.setCodeLocations,\n  });\n\n  const jobFilter = useStaticSetFilter<string>({\n    name: 'Job',\n    icon: 'job',\n    allValues: useMemo(\n      () =>\n        allJobs.map((job) => ({\n          key: job.name,\n          value: job.name,\n          match: [job.name],\n        })),\n      [allJobs],\n    ),\n    renderLabel: ({value}) => (\n      <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n        <Icon name=\"job\" />\n        <TruncatedTextWithFullTextOnHover text={value} />\n      </Box>\n    ),\n    getStringValue: (x) => x,\n    state: state.jobs,\n    onStateChanged: useCallback(\n      (values) => {\n        setters.setJobs(Array.from(values));\n      },\n      [setters],\n    ),\n  });\n\n  const filters = useMemo(() => [codeLocationFilter, jobFilter], [codeLocationFilter, jobFilter]);\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const filteredRepoBuckets = useMemo(() => {\n    return repoBuckets\n      .filter((bucket) => {\n        return !state.codeLocations.length || state.codeLocations.includes(bucket.repoAddress);\n      })\n      .map((bucket) => ({\n        ...bucket,\n        jobs: bucket.jobs.filter((job) => {\n          if (state.jobs.length && !state.jobs.includes(job.name)) {\n            return false;\n          }\n          return true;\n        }),\n      }))\n      .filter((bucket) => !!bucket.jobs.length);\n  }, [repoBuckets, state]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredRepoBuckets.length) {\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              repoBuckets.length\n                ? 'No jobs were found that match your filters'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredRepoBuckets} />;\n  };\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 8}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between', grow: 0}}\n        border=\"bottom\"\n      >\n        {filterButton}\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: WorkspacePipelineFragment[];\n};\n\nconst buildBuckets = (\n  locationEntries: Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines.filter(({name}) => !isHiddenAssetGroupJob(name));\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {JobsPageContent} from './JobsPageContent';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const JobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Jobs</Heading>} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default JobsRoot;\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {Box, CaptionMono, Colors, FontFamily, Popover} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.id}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.id}\n            runId={run.id}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <CaptionMono>{titleForRun(run)}</CaptionMono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.keylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.textDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  &:empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n"],"names":["LastRunSummary","memo","name","run","showHover","showButton","showSummary","param","status","intent","useMemo","RunStatus","SUCCESS","CANCELED","CANCELING","FAILURE","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Box","flex","direction","justifyContent","alignItems","gap","tag","tagElement","jsx","Tag","RunStatusIndicator","size","RunTime","Popover","position","interactionKind","content","div","RunStatusOverlay","hoverOpenDelay","RunStateSummary","failedStatuses","has","inProgressStatuses","StepSummaryForRun","runId","id","undefined","AnchorButton","to","props","data","useQuery","STEP_SUMMARY_FOR_RUN_QUERY","variables","pipelineRunOrError","__typename","relevantSteps","stepStats","filter","step","StepEventStatus","IN_PROGRESS","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","Caption","color","Colors","Link","stepKey","gql","useQueryPersistedFilterState","state","setState","useQueryPersistedState","encode","filterFields","reduce","acc","field","value","filters","JSON","stringify","decode","parse","setters","forEach","fieldAsString","charAt","toUpperCase","slice","prevState","Function","JobMenu","job","isAssetJob","repoAddress","lastRun","runs","pipelineSelector","pipelineName","repositoryName","repositoryLocationName","location","materialize","useMaterializationAction","onReexecute","useJobReexecution","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","usePermissionsForLocation","fetchHasExecutionPlan","queryResult","useLazyQuery","RUN_RE_EXECUTION_QUERY","fetchIfPossible","useCallback","executeItem","jsx_runtime","MenuItem","icon","text","disabled","loading","Spinner","purpose","onClick","e","MenuLink","workspacePipelinePath","repoName","repoLocation","isJob","path","reExecuteAllItem","ReexecutionStrategy","ALL_STEPS","canRunAllSteps","reExecuteFromFailureItem","FROM_FAILURE","canRunFromFailure","Fragment","launchpadElement","onOpened","Menu","Tooltip","display","Button","Icon","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","TEMPLATE_COLUMNS","VirtualizedJobRow","start","height","shouldQuery","useDelayedState","SINGLE_JOB_QUERY","selector","buildPipelineSelector","skip","useQueryRefreshAtInterval","FIFTEEN_SECONDS","pipeline","pipelineOrError","schedules","sensors","latestRuns","Row","$height","$start","RowGrid","border","RowCell","style","maxWidth","whiteSpace","fontWeight","workspacePathFromAddress","MiddleTruncate","CaptionText","description","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","padding","top","RunStatusPezList","jobName","reverse","fade","marginTop","VirtualizedJobHeader","HeaderRow","templateColumns","sticky","HeaderCell","styled","withConfig","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","OverviewJobsTable","repos","parentRef","useRef","allKeys","map","repoAddressAsHumanString","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","jobs","push","type","jobCount","repoKey","includes","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","row","ii","TABLE_HEADER_HEIGHT","overscan","totalHeight","getTotalSize","items","getVirtualItems","overflow","Container","ref","Inner","$totalHeight","index","key","RepoRow","expanded","showLocation","rightElement","placement","FILTER_FIELDS","JobsPageContent","allRepos","visibleRepos","cachedData","useContext","WorkspaceContext","repoCount","repoBuckets","cachedEntries","Object","values","visibleKeys","visibleRepoKeys","buildBuckets","allJobs","flatMap","bucket","_state","codeLocations","buildRepoAddress","codeLocationFilter","useCodeLocationFilter","setCodeLocations","jobFilter","useStaticSetFilter","allValues","match","renderLabel","TruncatedTextWithFullTextOnHover","getStringValue","x","onStateChanged","setJobs","Array","from","button","filterButton","activeFiltersJsx","useFilters","filteredRepoBuckets","horizontal","vertical","grow","SpinnerWithText","label","paddingTop","NonIdealState","title","entries","locationEntries","entry","locationOrLoadError","buckets","repo","repositories","pipelines","isHiddenAssetGroupJob","sortRepoBuckets","JobsRoot","useTrackPageView","useDocumentTitle","PageHeader","Heading","jobs_JobsRoot","sort","a","b","aString","bString","localeCompare","Set","option","repository","repositoryLocation","RunStatusPez","opacity","RUN_STATUS_COLORS","Pez","$color","$opacity","max","MAX_OPACITY","OverlayContainer","OverlayTitle","RunRow","CaptionMono","titleForRun","SummaryContainer","FontFamily","default"],"sourceRoot":""}
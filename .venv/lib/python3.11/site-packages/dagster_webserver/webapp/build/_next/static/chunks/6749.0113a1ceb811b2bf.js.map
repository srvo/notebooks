{"version":3,"file":"static/chunks/6749.0113a1ceb811b2bf.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instigation/useInstigationStateReducer.tsx","webpack://_N_E/../ui-core/src/automation/AutomationStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/instigation/instigationStateSummary.tsx","webpack://_N_E/../ui-core/src/automation/AutomationBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationRow.tsx","webpack://_N_E/../ui-core/src/schedules/hourOffsetFromUTC.tsx","webpack://_N_E/../ui-core/src/schedules/CronTag.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulesTable.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedScheduleRow.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationScheduleRow.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedSensorRow.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationSensorRow.tsx","webpack://_N_E/../ui-core/src/sensors/makeSensorKey.tsx","webpack://_N_E/../ui-core/src/automation/AutomationsTable.tsx","webpack://_N_E/../ui-core/src/instigation/filterPermissionedInstigationState.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useInstigationStatusFilter.tsx","webpack://_N_E/../ui-core/src/automation/MergedAutomationRoot.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx"],"sourcesContent":["import {useReducer} from 'react';\n\nexport type OpenWithIntent = 'not-open' | 'start' | 'stop';\n\ntype CompletionState = {completed: number; errors: {[id: string]: string}};\n\ntype DialogState = {\n  step: 'initial' | 'updating' | 'completed';\n  completion: CompletionState;\n};\n\ntype DialogAction =\n  | {type: 'reset'}\n  | {type: 'start'}\n  | {type: 'update-success'}\n  | {type: 'update-error'; name: string; error: string}\n  | {type: 'complete'};\n\nconst initialState: DialogState = {\n  step: 'initial',\n  completion: {completed: 0, errors: {}},\n};\n\nconst reducer = (prevState: DialogState, action: DialogAction): DialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'start':\n      return {...prevState, step: 'updating'};\n    case 'update-success': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {...completion, completed: completion.completed + 1},\n      };\n    }\n    case 'update-error': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {\n          ...completion,\n          completed: completion.completed + 1,\n          errors: {...completion.errors, [action.name]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const useInstigationStateReducer = () => useReducer(reducer, initialState);\n","// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {useMutation} from '../apollo-client';\nimport {assertUnreachable} from '../app/Util';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {START_SCHEDULE_MUTATION, STOP_SCHEDULE_MUTATION} from '../schedules/ScheduleMutations';\nimport {\n  StartThisScheduleMutation,\n  StartThisScheduleMutationVariables,\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {START_SENSOR_MUTATION, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StartSensorMutation,\n  StartSensorMutationVariables,\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {RepoAddress} from '../workspace/types';\n\nexport interface AutomationInfo {\n  repoAddress: RepoAddress;\n  name: string;\n  type: 'sensor' | 'schedule';\n  instigationState: BasicInstigationStateFragment;\n}\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  automations: AutomationInfo[];\n}\n\nexport const AutomationStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, automations} = props;\n  const count = automations.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSensor] = useMutation<StartSensorMutation, StartSensorMutationVariables>(\n    START_SENSOR_MUTATION,\n  );\n\n  const [stopSensor] = useMutation<StopRunningSensorMutation, StopRunningSensorMutationVariables>(\n    STOP_SENSOR_MUTATION,\n  );\n\n  const [startSchedule] = useMutation<\n    StartThisScheduleMutation,\n    StartThisScheduleMutationVariables\n  >(START_SCHEDULE_MUTATION);\n\n  const [stopSchedule] = useMutation<StopScheduleMutation, StopScheduleMutationVariables>(\n    STOP_SCHEDULE_MUTATION,\n  );\n\n  const start = async (automation: AutomationInfo) => {\n    const {repoAddress, name, type} = automation;\n    const repoValues = {\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    };\n\n    switch (type) {\n      case 'sensor': {\n        const {data} = await startSensor({\n          variables: {sensorSelector: {...repoValues, sensorName: name}},\n        });\n\n        switch (data?.startSensor.__typename) {\n          case 'Sensor':\n            dispatch({type: 'update-success'});\n            return;\n          case 'SensorNotFoundError':\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.startSensor.message,\n            });\n        }\n\n        break;\n      }\n\n      case 'schedule': {\n        const {data} = await startSchedule({\n          variables: {scheduleSelector: {...repoValues, scheduleName: name}},\n        });\n\n        switch (data?.startSchedule.__typename) {\n          case 'ScheduleStateResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.startSchedule.message,\n            });\n        }\n\n        break;\n      }\n\n      default:\n        assertUnreachable(type);\n    }\n  };\n\n  const stop = async (automation: AutomationInfo) => {\n    const {name, type, instigationState} = automation;\n    const variables = {id: instigationState.id};\n\n    switch (type) {\n      case 'sensor': {\n        const {data} = await stopSensor({variables});\n        switch (data?.stopSensor.__typename) {\n          case 'StopSensorMutationResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.stopSensor.message,\n            });\n        }\n        break;\n      }\n\n      case 'schedule': {\n        const {data} = await stopSchedule({variables});\n        switch (data?.stopRunningSchedule.__typename) {\n          case 'ScheduleStateResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.stopRunningSchedule.message,\n            });\n        }\n        break;\n      }\n\n      default:\n        assertUnreachable(type);\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const automation of automations) {\n      if (openWithIntent === 'start') {\n        await start(automation);\n      } else {\n        await stop(automation);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${\n                count === 1 ? '1 automation' : `${count} automations`\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${\n              count === 1 ? '1 automation' : `${count} automations`\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Automations are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 automation' : `${count} automations`}`\n            : `Stop ${count === 1 ? '1 automation' : `${count} automations`}`;\n        return (\n          <>\n            <Button onClick={onClose}>Cancel</Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 automation' : `${count} automations`}`\n            : `Stopping ${count === 1 ? '1 automation' : `${count} automations`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>\n          Please do not close the window or navigate away while automations are being updated.\n        </div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 automation' : `${successCount} automations`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 automation' : `${successCount} automations`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${\n                      errorCount === 1 ? '1 automation' : `${errorCount} automations`\n                    }:`\n                  : `Could not stop ${\n                      errorCount === 1 ? '1 automation' : `${errorCount} automations`\n                    }:`}\n              </div>\n            </Group>\n            <ul style={{margin: '8px 0'}}>\n              {Object.keys(errors).map((automationName) => (\n                <li key={automationName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{automationName}:</strong>\n                    {errors[automationName] ? <div>{errors[automationName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start automations' : 'Stop automations'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const instigationStateSummary = (instigationStates: BasicInstigationStateFragment[]) => {\n  let anyOff = false;\n  let anyOn = false;\n\n  for (const state of instigationStates) {\n    const {status} = state;\n    if (status === InstigationStatus.RUNNING) {\n      anyOn = true;\n    } else if (status === InstigationStatus.STOPPED) {\n      anyOff = true;\n    }\n    if (anyOn && anyOff) {\n      break;\n    }\n  }\n\n  return {anyOff, anyOn};\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {AutomationInfo, AutomationStateChangeDialog} from './AutomationStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  automations: AutomationInfo[];\n  onDone: () => void;\n}\n\nexport const AutomationBulkActionMenu = (props: Props) => {\n  const {automations, onDone} = props;\n  const count = automations.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(automations.map(({instigationState}) => instigationState));\n  }, [automations]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 automation' : `${count} automations`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 automation' : `${count} automations`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <AutomationStateChangeDialog\n        openWithIntent={openWithIntent}\n        automations={automations}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {Box} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {HeaderCell, HeaderRow} from '../ui/VirtualizedTable';\n\nexport const TEMPLATE_COLUMNS = '60px minmax(400px, 1.5fr) 240px 1fr 200px 200px';\n\nexport const VirtualizedAutomationHeader = ({checkbox}: {checkbox: React.ReactNode}) => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>\n        <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n      </HeaderCell>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nexport const AutomationRowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n","export const hourOffsetFromUTC = (timeZone: string) => {\n  const formatForTimezone = Intl.DateTimeFormat(navigator.language, {\n    timeZone,\n    timeZoneName: 'shortOffset',\n  });\n  const offset = formatForTimezone\n    .formatToParts(new Date())\n    .find((part) => part.type === 'timeZoneName')?.value;\n\n  const withoutGMT = offset?.replace('GMT', '');\n  if (!withoutGMT) {\n    return 0;\n  }\n\n  const [hours = '0', minutes = '0'] = withoutGMT.split(':');\n  const parsedHours = parseInt(hours, 10);\n  const parsedMinutes = (parseInt(minutes, 10) / 60) * (parsedHours < 0 ? -1 : 1);\n  return parsedHours + parsedMinutes;\n};\n","import {CaptionMono, MetadataTable, Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\nimport styled from 'styled-components';\n\nimport {hourOffsetFromUTC} from './hourOffsetFromUTC';\nimport {humanCronString} from './humanCronString';\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\n\ninterface Props {\n  cronSchedule: string;\n  executionTimezone: string | null;\n}\n\nexport const CronTag = (props: Props) => {\n  const {cronSchedule, executionTimezone} = props;\n  const {\n    timezone: [storedTimezone],\n  } = useContext(TimeContext);\n\n  const longTimezoneName = executionTimezone || 'UTC';\n  const humanStringWithExecutionTimezone = humanCronString(cronSchedule, {longTimezoneName});\n  const userTimezone = storedTimezone === 'Automatic' ? browserTimezone() : storedTimezone;\n\n  const userTimezoneOffset = hourOffsetFromUTC(userTimezone);\n  const executionTimezoneOffset = hourOffsetFromUTC(longTimezoneName);\n  const tzOffset = userTimezoneOffset - executionTimezoneOffset;\n\n  const humanStringWithUserTimezone = humanCronString(cronSchedule, {\n    longTimezoneName: userTimezone,\n    tzOffset,\n  });\n\n  const tooltipContent = (\n    <MetadataTable\n      rows={[\n        {key: 'Cron value', value: <CaptionMono>{cronSchedule}</CaptionMono>},\n        {key: 'Your time', value: <span>{humanStringWithUserTimezone}</span>},\n      ]}\n    />\n  );\n\n  return (\n    <Container>\n      <Tooltip content={tooltipContent} placement=\"top\">\n        <Tag icon=\"schedule\">{humanStringWithExecutionTimezone}</Tag>\n      </Tooltip>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  .bp5-popover-target {\n    max-width: 100%;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {InstigationStatus} from '../graphql/types';\n\nexport const errorDisplay = (status: InstigationStatus, runningScheduleCount: number) => {\n  if (status === InstigationStatus.STOPPED && runningScheduleCount === 0) {\n    return null;\n  } else if (status === InstigationStatus.RUNNING && runningScheduleCount === 1) {\n    return null;\n  }\n\n  const errors = [];\n  if (status === InstigationStatus.RUNNING && runningScheduleCount === 0) {\n    errors.push(\n      'Schedule is set to be running, but either the scheduler is not configured or the scheduler is not running the schedule',\n    );\n  } else if (status === InstigationStatus.STOPPED && runningScheduleCount > 0) {\n    errors.push('Schedule is set to be stopped, but the scheduler is still running the schedule');\n  }\n\n  if (runningScheduleCount > 0) {\n    errors.push('Duplicate cron job for schedule found.');\n  }\n\n  return (\n    <Popover\n      interactionKind=\"hover\"\n      popoverClassName=\"bp5-popover-content-sizing\"\n      position=\"right\"\n      content={\n        <Box flex={{direction: 'column', gap: 8}} padding={12}>\n          <strong>There are errors with this schedule.</strong>\n          <div>Errors:</div>\n          <ul>\n            {errors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </Box>\n      }\n    >\n      <Tag fill interactive intent=\"danger\">\n        Error\n      </Tag>\n    </Popover>\n  );\n};\n","import {\n  Box,\n  Button,\n  Caption,\n  Checkbox,\n  Colors,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {LoadingOrNone} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from './types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {CronTag} from '../schedules/CronTag';\nimport {SCHEDULE_ASSET_SELECTIONS_QUERY} from '../schedules/ScheduleAssetSelectionsQuery';\nimport {SCHEDULE_SWITCH_FRAGMENT, ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {\n  ScheduleAssetSelectionQuery,\n  ScheduleAssetSelectionQueryVariables,\n} from '../schedules/types/ScheduleAssetSelectionsQuery.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {MenuLink} from '../ui/MenuLink';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.2fr 1fr 1fr 76px 148px 210px 92px';\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = `60px ${TEMPLATE_COLUMNS}`;\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  scheduleState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    scheduleState,\n    start,\n    height,\n  } = props;\n\n  const repo = useRepository(repoAddress);\n\n  // Wait 100ms before querying in case we're scrolling the table really fast\n  const shouldQuery = useDelayedState(100);\n\n  const scheduleQueryResult = useQuery<SingleScheduleQuery, SingleScheduleQueryVariables>(\n    SINGLE_SCHEDULE_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          scheduleName: name,\n        },\n      },\n      notifyOnNetworkStatusChange: true,\n      skip: !shouldQuery,\n    },\n  );\n\n  const scheduleAssetSelectionQueryResult = useQuery<\n    ScheduleAssetSelectionQuery,\n    ScheduleAssetSelectionQueryVariables\n  >(SCHEDULE_ASSET_SELECTIONS_QUERY, {\n    variables: {\n      scheduleSelector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    skip: !shouldQuery,\n  });\n\n  useQueryRefreshAtInterval(scheduleQueryResult, FIFTEEN_SECONDS);\n  useQueryRefreshAtInterval(scheduleAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = scheduleQueryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = scheduleState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this schedule'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this schedule'};\n    }\n    return {disabled: false};\n  }, [scheduleState]);\n\n  const tick = scheduleData?.scheduleState.ticks[0];\n  const targets = scheduleData?.pipelineName ? [{pipelineName: scheduleData.pipelineName}] : null;\n  const assetSelection =\n    scheduleAssetSelectionQueryResult.data?.scheduleOrError.__typename === 'Schedule'\n      ? scheduleAssetSelectionQueryResult.data.scheduleOrError.assetSelection\n      : null;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <span style={{fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </span>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <CronTag\n                cronSchedule={scheduleData.cronSchedule}\n                executionTimezone={scheduleData.executionTimezone}\n              />\n              {scheduleData.scheduleState.nextTick &&\n              scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                <Caption>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    Next tick:&nbsp;\n                    <TimestampDisplay\n                      timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                      timezone={scheduleData.executionTimezone}\n                      timeFormat={{showSeconds: false, showTimezone: true}}\n                    />\n                  </div>\n                </Caption>\n              ) : null}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={scheduleQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <div>\n            <AutomationTargetList\n              repoAddress={repoAddress}\n              automationType=\"schedule\"\n              targets={targets}\n              assetSelection={assetSelection}\n            />\n          </div>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} tickResultType=\"runs\" />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={scheduleQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={scheduleQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : (\n            <span style={{color: Colors.textLight()}}>{'\\u2013'}</span>\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedScheduleHeader = (props: {checkbox: React.ReactNode}) => {\n  const {checkbox} = props;\n  return (\n    <HeaderRow\n      templateColumns={checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS}\n      sticky\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Schedule name</HeaderCell>\n      <HeaderCell>Schedule</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          hasStartPermission\n          hasStopPermission\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n`;\n","import {\n  Box,\n  Caption,\n  Checkbox,\n  MiddleTruncate,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AutomationTargetList} from './AutomationTargetList';\nimport {AutomationRowGrid} from './VirtualizedAutomationRow';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {CronTag} from '../schedules/CronTag';\nimport {SCHEDULE_ASSET_SELECTIONS_QUERY} from '../schedules/ScheduleAssetSelectionsQuery';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {\n  ScheduleAssetSelectionQuery,\n  ScheduleAssetSelectionQueryVariables,\n} from '../schedules/types/ScheduleAssetSelectionsQuery.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RowCell} from '../ui/VirtualizedTable';\nimport {SINGLE_SCHEDULE_QUERY} from '../workspace/VirtualizedScheduleRow';\nimport {LoadingOrNone} from '../workspace/VirtualizedWorkspaceTable';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from '../workspace/types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface ScheduleRowProps {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const VirtualizedAutomationScheduleRow = forwardRef(\n  (props: ScheduleRowProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n\n    const queryResult = useQuery<SingleScheduleQuery, SingleScheduleQueryVariables>(\n      SINGLE_SCHEDULE_QUERY,\n      {\n        variables: {\n          selector: {\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n            scheduleName: name,\n          },\n        },\n        skip: !shouldQuery,\n        notifyOnNetworkStatusChange: true,\n      },\n    );\n\n    const scheduleAssetSelectionQueryResult = useQuery<\n      ScheduleAssetSelectionQuery,\n      ScheduleAssetSelectionQueryVariables\n    >(SCHEDULE_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        scheduleSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          scheduleName: name,\n        },\n      },\n      skip: !shouldQuery,\n    });\n\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(scheduleAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n\n    const scheduleData = useMemo(() => {\n      if (data?.scheduleOrError.__typename !== 'Schedule') {\n        return null;\n      }\n\n      return data.scheduleOrError;\n    }, [data]);\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n      if (onToggleChecked && e.target instanceof HTMLInputElement) {\n        const {checked} = e.target;\n        const shiftKey =\n          e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n        onToggleChecked({checked, shiftKey});\n      }\n    };\n\n    const scheduleState = scheduleData?.scheduleState;\n\n    const checkboxState = useMemo(() => {\n      if (!scheduleState) {\n        return {disabled: true};\n      }\n\n      const {hasStartPermission, hasStopPermission, status} = scheduleState;\n      if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n        return {disabled: true, message: 'You do not have permission to stop this schedule'};\n      }\n      if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n        return {disabled: true, message: 'You do not have permission to start this schedule'};\n      }\n      return {disabled: false};\n    }, [scheduleState]);\n\n    const tick = scheduleData?.scheduleState.ticks[0];\n    const targets = scheduleData?.pipelineName ? [{pipelineName: scheduleData.pipelineName}] : null;\n    const assetSelection =\n      scheduleAssetSelectionQueryResult.data?.scheduleOrError.__typename === 'Schedule'\n        ? scheduleAssetSelectionQueryResult.data.scheduleOrError.assetSelection\n        : null;\n\n    return (\n      <div ref={ref} data-index={index}>\n        <AutomationRowGrid border=\"bottom\">\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n          <RowCell>\n            <Box\n              flex={{\n                direction: 'row',\n                gap: 8,\n                alignItems: 'flex-start',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Box flex={{grow: 1, gap: 8}}>\n                {scheduleData ? (\n                  <>\n                    <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n                    {errorDisplay(\n                      scheduleData.scheduleState.status,\n                      scheduleData.scheduleState.runningCount,\n                    )}\n                  </>\n                ) : (\n                  <div style={{width: 30}} />\n                )}\n                <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                  <MiddleTruncate text={name} />\n                </Link>\n              </Box>\n            </Box>\n          </RowCell>\n          <RowCell>\n            {scheduleData ? (\n              <Box flex={{direction: 'column', gap: 4}}>\n                <CronTag\n                  cronSchedule={scheduleData.cronSchedule}\n                  executionTimezone={scheduleData.executionTimezone}\n                />\n                {scheduleData.scheduleState.nextTick &&\n                scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                  <Caption>\n                    <div\n                      style={{\n                        overflow: 'hidden',\n                        whiteSpace: 'nowrap',\n                        maxWidth: '100%',\n                        textOverflow: 'ellipsis',\n                      }}\n                    >\n                      Next tick:&nbsp;\n                      <TimestampDisplay\n                        timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                        timezone={scheduleData.executionTimezone}\n                        timeFormat={{showSeconds: false, showTimezone: true}}\n                      />\n                    </div>\n                  </Caption>\n                ) : null}\n              </Box>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            <div>\n              <AutomationTargetList\n                repoAddress={repoAddress}\n                automationType=\"schedule\"\n                targets={targets}\n                assetSelection={assetSelection}\n              />\n            </div>\n          </RowCell>\n          <RowCell>\n            {tick ? (\n              <div>\n                <TickStatusTag tick={tick} tickResultType=\"runs\" />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n              <LastRunSummary\n                run={scheduleData.scheduleState.runs[0]}\n                name={name}\n                showButton={false}\n                showHover\n                showSummary={false}\n              />\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n        </AutomationRowGrid>\n      </div>\n    );\n  },\n);\n","import {\n  Box,\n  Caption,\n  Checkbox,\n  Colors,\n  IconName,\n  MiddleTruncate,\n  Tag,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {LoadingOrNone} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SENSOR_SWITCH_FRAGMENT, SensorSwitch} from '../sensors/SensorSwitch';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 180px 1fr 76px 120px 148px 180px';\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = `60px ${TEMPLATE_COLUMNS}`;\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  sensorState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    sensorState,\n    start,\n    height,\n  } = props;\n\n  // Wait 100ms before querying in case we're scrolling the table really fast\n  const shouldQuery = useDelayedState(100);\n\n  const sensorQueryResult = useQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n    SINGLE_SENSOR_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n      skip: !shouldQuery,\n    },\n  );\n\n  const sensorAssetSelectionQueryResult = useQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {\n      sensorSelector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        sensorName: name,\n      },\n    },\n    skip: !shouldQuery,\n  });\n\n  useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n  useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = sensorQueryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = sensorState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this sensor'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this sensor'};\n    }\n    return {disabled: false};\n  }, [sensorState]);\n\n  const tick = sensorData?.sensorState.ticks[0];\n\n  const sensorType = sensorData?.sensorType;\n  const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n\n  const selectedAssets =\n    sensorAssetSelectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n      ? sensorAssetSelectionQueryResult.data.sensorOrError.assetSelection\n      : null;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.textLight(),\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {sensorData?.description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <div>\n            {sensorInfo ? (\n              sensorInfo.description ? (\n                <Tooltip content={sensorInfo.description}>\n                  <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                </Tooltip>\n              ) : (\n                <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n              )\n            ) : null}\n          </div>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div>\n              <AutomationTargetList\n                targets={sensorData.targets}\n                repoAddress={repoAddress}\n                assetSelection={selectedAssets}\n                automationType={sensorData.sensorType}\n              />\n            </div>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div style={{color: Colors.textDefault()}}>\n              {humanizeSensorInterval(sensorData.minIntervalSeconds)}\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} tickResultType=\"runs\" />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedSensorHeader = ({checkbox}: {checkbox: React.ReactNode}) => {\n  return (\n    <HeaderRow\n      templateColumns={checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS}\n      sticky\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Frequency</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const SENSOR_TYPE_META: Record<\n  SensorType,\n  {name: string; icon: IconName; description: string | null}\n> = {\n  [SensorType.ASSET]: {\n    name: 'Asset sensor',\n    icon: 'sensors',\n    description: 'Asset sensors instigate runs when a materialization occurs',\n  },\n  [SensorType.AUTO_MATERIALIZE]: {\n    name: 'Automation condition sensor',\n    icon: 'automation_condition',\n    description:\n      'Automation condition sensors trigger runs based on conditions defined on assets or checks.',\n  },\n  [SensorType.AUTOMATION]: {\n    name: 'Automation condition sensor',\n    icon: 'automation_condition',\n    description:\n      'Automation condition sensors trigger runs based on conditions defined on assets or checks.',\n  },\n  [SensorType.FRESHNESS_POLICY]: {\n    name: 'Freshness policy sensor',\n    icon: 'sensors',\n    description:\n      'Freshness sensors check the freshness of assets on each tick, then perform an action in response to that status',\n  },\n  [SensorType.MULTI_ASSET]: {\n    name: 'Multi-asset sensor',\n    icon: 'sensors',\n    description:\n      'Multi asset sensors trigger job executions based on multiple asset materialization event streams',\n  },\n  [SensorType.RUN_STATUS]: {\n    name: 'Run status sensor',\n    icon: 'sensors',\n    description: 'Run status sensors react to run status',\n  },\n  [SensorType.STANDARD]: {\n    name: 'Standard sensor',\n    icon: 'sensors',\n    description: null,\n  },\n  [SensorType.UNKNOWN]: {\n    name: 'Standard sensor',\n    icon: 'sensors',\n    description: null,\n  },\n};\n\nexport const SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        description\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          hasStartPermission\n          hasStopPermission\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {\n  Box,\n  Checkbox,\n  MiddleTruncate,\n  Tag,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AutomationTargetList} from './AutomationTargetList';\nimport {AutomationRowGrid} from './VirtualizedAutomationRow';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RowCell} from '../ui/VirtualizedTable';\nimport {SENSOR_TYPE_META, SINGLE_SENSOR_QUERY} from '../workspace/VirtualizedSensorRow';\nimport {LoadingOrNone} from '../workspace/VirtualizedWorkspaceTable';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleSensorQuery,\n  SingleSensorQueryVariables,\n} from '../workspace/types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const VirtualizedAutomationSensorRow = forwardRef(\n  (props: Props, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n\n    const sensorQueryResult = useQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n      SINGLE_SENSOR_QUERY,\n      {\n        variables: {\n          selector: {\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n            sensorName: name,\n          },\n        },\n        skip: !shouldQuery,\n      },\n    );\n\n    const sensorAssetSelectionQueryResult = useQuery<\n      SensorAssetSelectionQuery,\n      SensorAssetSelectionQueryVariables\n    >(SENSOR_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        sensorSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n      skip: !shouldQuery,\n    });\n\n    useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = sensorQueryResult;\n\n    const sensorData = useMemo(() => {\n      if (data?.sensorOrError.__typename !== 'Sensor') {\n        return null;\n      }\n\n      return data.sensorOrError;\n    }, [data]);\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n      if (onToggleChecked && e.target instanceof HTMLInputElement) {\n        const {checked} = e.target;\n        const shiftKey =\n          e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n        onToggleChecked({checked, shiftKey});\n      }\n    };\n\n    const sensorState = sensorData?.sensorState;\n\n    const checkboxState = useMemo(() => {\n      if (!sensorState) {\n        return {disabled: true};\n      }\n\n      const {hasStartPermission, hasStopPermission, status} = sensorState;\n      if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n        return {disabled: true, message: 'You do not have permission to stop this sensor'};\n      }\n      if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n        return {disabled: true, message: 'You do not have permission to start this sensor'};\n      }\n      return {disabled: false};\n    }, [sensorState]);\n\n    const tick = sensorData?.sensorState.ticks[0];\n\n    const sensorType = sensorData?.sensorType;\n    const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n    const selectedAssets =\n      sensorAssetSelectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n        ? sensorAssetSelectionQueryResult.data.sensorOrError.assetSelection\n        : null;\n\n    return (\n      <div ref={ref} data-index={index}>\n        <AutomationRowGrid border=\"bottom\">\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n          <RowCell>\n            <Box\n              flex={{\n                direction: 'row',\n                gap: 8,\n                alignItems: 'flex-start',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Box flex={{grow: 1, gap: 8}}>\n                {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n                {sensorData ? (\n                  <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n                ) : (\n                  <div style={{width: 30}} />\n                )}\n                <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                  <MiddleTruncate text={name} />\n                </Link>\n              </Box>\n            </Box>\n          </RowCell>\n          <RowCell>\n            <div>\n              {sensorInfo ? (\n                sensorInfo.description ? (\n                  <Tooltip\n                    content={<div style={{maxWidth: '300px'}}>{sensorInfo.description}</div>}\n                    placement=\"top\"\n                  >\n                    <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                  </Tooltip>\n                ) : (\n                  <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                )\n              ) : null}\n            </div>\n          </RowCell>\n          <RowCell>\n            {sensorData ? (\n              <div>\n                <AutomationTargetList\n                  targets={sensorData.targets || null}\n                  repoAddress={repoAddress}\n                  assetSelection={selectedAssets}\n                  automationType={sensorData.sensorType}\n                />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={sensorAssetSelectionQueryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {tick ? (\n              <div>\n                <TickStatusTag tick={tick} tickResultType=\"runs\" />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={sensorQueryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n              <LastRunSummary\n                run={sensorData.sensorState.runs[0]}\n                name={name}\n                showButton={false}\n                showHover\n                showSummary={false}\n              />\n            ) : (\n              <LoadingOrNone queryResult={sensorQueryResult} />\n            )}\n          </RowCell>\n        </AutomationRowGrid>\n      </div>\n    );\n  },\n);\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\n// todo dish: Delete this in favor of `makeAutomationKey`, they're the same.\nexport const makeSensorKey = (repoAddress: RepoAddress, sensorName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${sensorName}`;\n};\n\nexport const makeAutomationKey = (repoAddress: RepoAddress, automationName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${automationName}`;\n};\n","import {Box, Row, Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {VirtualizedAutomationHeader} from './VirtualizedAutomationRow';\nimport {VirtualizedAutomationScheduleRow} from './VirtualizedAutomationScheduleRow';\nimport {VirtualizedAutomationSensorRow} from './VirtualizedAutomationSensorRow';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {makeAutomationKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {DynamicRepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n  sensors: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: string}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: string};\n\nexport const AutomationsTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules, sensors}) => {\n      flat.push({\n        type: 'header',\n        repoAddress,\n        scheduleCount: schedules.length,\n        sensorCount: sensors.length,\n      });\n      const repoKey = repoAddressAsHumanString(repoAddress);\n\n      if (expandedKeys.includes(repoKey)) {\n        const sensorKeys = new Set(sensors);\n        const scheduleKeys = new Set(schedules);\n        const repoAutomations = [...sensors, ...schedules].sort((a, b) =>\n          COMMON_COLLATOR.compare(a, b),\n        );\n\n        repoAutomations.forEach((name) => {\n          if (sensorKeys.has(name)) {\n            flat.push({type: 'sensor', repoAddress, sensor: name});\n          } else if (scheduleKeys.has(name)) {\n            flat.push({type: 'schedule', repoAddress, schedule: name});\n          }\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 15,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedAutomationHeader checkbox={headerCheckbox} />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            if (type === 'header') {\n              return (\n                <Row $height={size} $start={start} key={key}>\n                  <DynamicRepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    ref={rowVirtualizer.measureElement}\n                    index={index}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Box flex={{direction: 'row', gap: 4}}>\n                        <Tooltip\n                          content={\n                            row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`\n                          }\n                          placement=\"top\"\n                        >\n                          <Tag icon=\"sensors\">{row.sensorCount}</Tag>\n                        </Tooltip>\n                        <Tooltip\n                          content={\n                            row.scheduleCount === 1\n                              ? '1 schedule'\n                              : `${row.scheduleCount} schedules`\n                          }\n                          placement=\"top\"\n                        >\n                          <Tag icon=\"schedule\">{row.scheduleCount}</Tag>\n                        </Tooltip>\n                      </Box>\n                    }\n                  />\n                </Row>\n              );\n            }\n\n            if (type === 'sensor') {\n              const sensorKey = makeAutomationKey(row.repoAddress, row.sensor);\n              return (\n                <Row $height={size} $start={start} key={key}>\n                  <VirtualizedAutomationSensorRow\n                    key={key}\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.sensor}\n                    checked={checkedKeys.has(sensorKey)}\n                    onToggleChecked={onToggleCheckFactory(sensorKey)}\n                    repoAddress={row.repoAddress}\n                  />\n                </Row>\n              );\n            }\n\n            if (type === 'schedule') {\n              const scheduleKey = makeAutomationKey(row.repoAddress, row.schedule);\n              return (\n                <Row $height={size} $start={start} key={key}>\n                  <VirtualizedAutomationScheduleRow\n                    key={key}\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.schedule}\n                    checked={checkedKeys.has(scheduleKey)}\n                    onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                    repoAddress={row.repoAddress}\n                  />\n                </Row>\n              );\n            }\n\n            return <div key={key} />;\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const filterPermissionedInstigationState = (\n  instigationState: BasicInstigationStateFragment,\n) => {\n  return (\n    (instigationState.hasStartPermission &&\n      instigationState.status === InstigationStatus.STOPPED) ||\n    (instigationState.hasStopPermission && instigationState.status === InstigationStatus.RUNNING)\n  );\n};\n","import {InstigationStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useStaticSetFilter} from '../BaseFilters/useStaticSetFilter';\n\nexport const useInstigationStatusFilter = () => {\n  const [state, onStateChanged] = useQueryPersistedState<Set<InstigationStatus>>({\n    encode: (vals) => ({instigationStatus: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.instigationStatus?.split(',') as InstigationStatus[]) || []),\n  });\n  return useStaticSetFilter<InstigationStatus>({\n    name: 'Running state',\n    icon: 'toggle_off',\n    allValues: [\n      {value: InstigationStatus.RUNNING, match: ['on', 'running']},\n      {value: InstigationStatus.STOPPED, match: ['off', 'stopped']},\n    ],\n    getKey: (value) => value,\n    renderLabel: ({value}) => (\n      <span>{value === InstigationStatus.RUNNING ? 'Running' : 'Stopped'}</span>\n    ),\n    state,\n    onStateChanged,\n    getStringValue: (value) => value,\n  });\n};\n","import {\n  Body2,\n  Box,\n  Colors,\n  Heading,\n  Icon,\n  NonIdealState,\n  PageHeader,\n  SpinnerWithText,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useCallback, useContext, useMemo} from 'react';\n\nimport {AutomationBulkActionMenu} from './AutomationBulkActionMenu';\nimport {AutomationsTable} from './AutomationsTable';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {makeAutomationKey} from '../sensors/makeSensorKey';\nimport {useFilters} from '../ui/BaseFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {doesFilterArrayMatchValueArray} from '../ui/Filters/doesFilterArrayMatchValueArray';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {\n  useDefinitionTagFilterWithManagedState,\n  useTagsForObjects,\n} from '../ui/Filters/useDefinitionTagFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\ntype AutomationType = 'schedules' | 'sensors';\n\nconst AUTOMATION_TYPE_FILTERS = {\n  schedules: {\n    label: 'Schedules',\n    value: {type: 'schedules', label: 'Schedules'},\n    match: ['schedules'],\n  },\n  sensors: {\n    label: 'Sensors',\n    value: {type: 'sensors', label: 'Sensors'},\n    match: ['sensors'],\n  },\n};\n\nconst ALL_AUTOMATION_VALUES = Object.values(AUTOMATION_TYPE_FILTERS);\n\nexport const MergedAutomationRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Automation');\n\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n    refetch,\n  } = useContext(WorkspaceContext);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const [automationTypes, setAutomationTypes] = useQueryPersistedState<Set<AutomationType>>({\n    encode: (vals) => ({automationType: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.automationType?.split(',') as AutomationType[]) || []),\n  });\n\n  const automationFilterState = useMemo(() => {\n    return new Set(\n      Array.from(automationTypes).map(\n        (type) => AUTOMATION_TYPE_FILTERS[type as AutomationType].value,\n      ),\n    );\n  }, [automationTypes]);\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n  const automationTypeFilter = useStaticSetFilter({\n    name: 'Automation type',\n    allValues: ALL_AUTOMATION_VALUES,\n    icon: 'automation_condition',\n    getStringValue: (value) => value.label,\n    state: automationFilterState,\n    renderLabel: ({value}) => <span>{value.label}</span>,\n    onStateChanged: (state) => {\n      setAutomationTypes(new Set(Array.from(state).map((value) => value.type as AutomationType)));\n    },\n  });\n\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(cachedEntries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, visibleRepos]);\n\n  const tagsFilter = useDefinitionTagFilterWithManagedState({\n    allTags: useTagsForObjects(\n      repoBuckets,\n      useCallback((repoBucket) => {\n        return [\n          ...repoBucket.schedules.flatMap((schedule) => schedule.tags),\n          ...repoBucket.sensors.flatMap((sensor) => sensor.tags),\n        ];\n      }, []),\n    ),\n  });\n  const {state: tagFilterState} = tagsFilter;\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter, automationTypeFilter, tagsFilter],\n    [codeLocationFilter, runningStateFilter, automationTypeFilter, tagsFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const {state: runningState} = runningStateFilter;\n\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({sensors, schedules, ...rest}) => {\n      return {\n        ...rest,\n        sensors: sensors.filter(({sensorState, tags}) => {\n          if (\n            tagFilterState.size &&\n            !doesFilterArrayMatchValueArray(Array.from(tagFilterState), tags)\n          ) {\n            return false;\n          }\n          if (runningState.size && !runningState.has(sensorState.status)) {\n            return false;\n          }\n          if (automationTypes.size && !automationTypes.has('sensors')) {\n            return false;\n          }\n          return true;\n        }),\n        schedules: schedules.filter(({scheduleState, tags}) => {\n          if (\n            tagFilterState.size &&\n            !doesFilterArrayMatchValueArray(Array.from(tagFilterState), tags)\n          ) {\n            return false;\n          }\n          if (runningState.size && !runningState.has(scheduleState.status)) {\n            return false;\n          }\n          if (automationTypes.size && !automationTypes.has('schedules')) {\n            return false;\n          }\n          return true;\n        }),\n      };\n    });\n  }, [repoBuckets, tagFilterState, runningState, automationTypes]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules, sensors}) => ({\n        repoAddress,\n        schedules: schedules\n          .filter(({name}) => name.toLocaleLowerCase().includes(searchToLower))\n          .map(({name}) => name),\n        sensors: sensors\n          .filter(({name}) => name.toLocaleLowerCase().includes(searchToLower))\n          .map(({name}) => name),\n      }))\n      .filter(({sensors, schedules}) => sensors.length > 0 || schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  // Collect all automations across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedAutomations = useMemo(() => {\n    return filteredBuckets\n      .map(({repoAddress, schedules, sensors}) => {\n        return [\n          ...sensors\n            .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n            .map(({name, sensorState}) => ({\n              repoAddress,\n              name,\n              type: 'sensor' as const,\n              instigationState: sensorState,\n            })),\n          ...schedules\n            .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n            .map(({name, scheduleState}) => ({\n              repoAddress,\n              name,\n              type: 'schedule' as const,\n              instigationState: scheduleState,\n            })),\n        ];\n      })\n      .flat();\n  }, [filteredBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedAutomationKeys = useMemo(() => {\n    return allPermissionedAutomations.map(({repoAddress, name}) =>\n      makeAutomationKey(repoAddress, name),\n    );\n  }, [allPermissionedAutomations]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedAutomationKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules, sensors}) => {\n          return [...schedules, ...sensors].map((name) => makeAutomationKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedAutomationKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedAutomationKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedAutomations = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedAutomations.filter(({repoAddress, name}) => {\n      return checkedKeysOnScreen.has(makeAutomationKey(repoAddress, name));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedAutomations, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedAutomationKeys.length > 0;\n  const checkedCount = checkedAutomations.length;\n  const anyAutomationsVisible = permissionedKeysOnScreen.length > 0;\n\n  const content = () => {\n    if (workspaceLoading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} padding={{top: 64}}>\n          <SpinnerWithText label=\"Loading automations…\" />\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching automations\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No automations matching <strong>{searchValue}</strong> were found in the\n                    selected code locations\n                  </div>\n                ) : (\n                  <div>\n                    No automations matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No automations\"\n            description={\n              anyReposHidden ? (\n                'No automations were found in the selected code locations'\n              ) : (\n                <Body2>\n                  There are no automations in this deployment.{' '}\n                  <a\n                    href=\"https://docs.dagster.io/concepts/automation\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n                      Learn more about automations\n                      <Icon name=\"open_in_new\" color={Colors.linkDefault()} />\n                    </Box>\n                  </a>\n                </Body2>\n              )\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <AutomationsTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Automation</Heading>} />\n      <Box\n        padding={{horizontal: 24, vertical: 12}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anyAutomationsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <AutomationBulkActionMenu automations={checkedAutomations} onDone={() => refetch()} />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {content()}\n    </Box>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default MergedAutomationRoot;\n\nconst buildBuckets = (\n  locationEntries: Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n) => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0 || schedules.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n"],"names":["initialState","step","completion","completed","errors","reducer","prevState","action","type","name","error","useInstigationStateReducer","useReducer","AutomationStateChangeDialog","openWithIntent","onClose","onComplete","automations","props","count","length","state","dispatch","useEffect","startSensor","useMutation","START_SENSOR_MUTATION","stopSensor","STOP_SENSOR_MUTATION","startSchedule","START_SCHEDULE_MUTATION","stopSchedule","STOP_SCHEDULE_MUTATION","start","automation","repoAddress","repoValues","repositoryLocationName","location","repositoryName","data","variables","sensorSelector","sensorName","__typename","message","scheduleSelector","scheduleName","assertUnreachable","stop","instigationState","id","stopRunningSchedule","mutate","canQuicklyClose","jsx_runtime","jsxs","Dialog","isOpen","title","canEscapeKeyClose","canOutsideClickClose","jsx","DialogBody","Group","direction","spacing","progressContent","div","value","ProgressBar","intent","Math","max","animate","NavigationBlock","completionContent","errorCount","Object","keys","successCount","alignItems","Icon","color","Colors","ul","style","margin","map","li","strong","automationName","DialogFooter","buttons","label","Fragment","Button","onClick","disabled","instigationStateSummary","anyOff","anyOn","instigationStates","status","InstigationStatus","RUNNING","STOPPED","AutomationBulkActionMenu","onDone","setOpenWithIntent","useState","useMemo","param","Popover","content","Menu","MenuItem","text","aria-disabled","icon","placement","rightIcon","TEMPLATE_COLUMNS","VirtualizedAutomationHeader","checkbox","HeaderRow","templateColumns","sticky","HeaderCell","position","top","AutomationRowGrid","styled","Box","hourOffsetFromUTC","formatForTimezone","Intl","DateTimeFormat","navigator","language","timeZone","timeZoneName","offset","formatToParts","Date","find","part","withoutGMT","replace","hours","minutes","split","parsedHours","parseInt","parsedMinutes","CronTag","cronSchedule","executionTimezone","timezone","storedTimezone","useContext","TimeContext","longTimezoneName","humanStringWithExecutionTimezone","humanCronString","userTimezone","browserTimezone","userTimezoneOffset","executionTimezoneOffset","humanStringWithUserTimezone","tzOffset","tooltipContent","MetadataTable","rows","key","CaptionMono","span","Container","Tooltip","Tag","withConfig","errorDisplay","runningScheduleCount","push","interactionKind","popoverClassName","flex","gap","padding","index","fill","interactive","TEMPLATE_COLUMNS_WITH_CHECKBOX","$showCheckboxColumn","SINGLE_SCHEDULE_QUERY","gql","TICK_TAG_FRAGMENT","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","VirtualizedAutomationScheduleRow","forwardRef","ref","checked","onToggleChecked","shouldQuery","useDelayedState","queryResult","useQuery","selector","skip","notifyOnNetworkStatusChange","scheduleAssetSelectionQueryResult","SCHEDULE_ASSET_SELECTIONS_QUERY","useQueryRefreshAtInterval","FIFTEEN_SECONDS","scheduleData","scheduleOrError","scheduleState","checkboxState","hasStartPermission","hasStopPermission","tick","ticks","targets","pipelineName","assetSelection","data-index","border","RowCell","canShow","Checkbox","onChange","e","target","HTMLInputElement","shiftKey","nativeEvent","MouseEvent","getModifierState","justifyContent","grow","ScheduleSwitch","schedule","runningCount","width","Link","to","workspacePathFromAddress","MiddleTruncate","nextTick","Caption","overflow","whiteSpace","maxWidth","textOverflow","TimestampDisplay","timestamp","timeFormat","showSeconds","showTimezone","LoadingOrNone","AutomationTargetList","automationType","TickStatusTag","tickResultType","runs","LastRunSummary","run","showButton","showHover","showSummary","SENSOR_TYPE_META","SensorType","ASSET","description","AUTO_MATERIALIZE","AUTOMATION","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","STANDARD","UNKNOWN","SINGLE_SENSOR_QUERY","SENSOR_SWITCH_FRAGMENT","VirtualizedAutomationSensorRow","sensorQueryResult","sensorAssetSelectionQueryResult","SENSOR_ASSET_SELECTIONS_QUERY","sensorData","sensorOrError","sensorState","sensorType","sensorInfo","selectedAssets","SensorSwitch","sensor","makeAutomationKey","repoAddressAsHumanString","AutomationsTable","repos","headerCheckbox","checkedKeys","onToggleCheckFactory","parentRef","React","allKeys","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","forEach","schedules","sensors","scheduleCount","sensorCount","repoKey","includes","sensorKeys","Set","scheduleKeys","repoAutomations","sort","a","b","COMMON_COLLATOR","compare","has","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","row","ii","overscan","totalHeight","getTotalSize","items","getVirtualItems","Inner","$totalHeight","size","Row","$height","$start","DynamicRepoRow","measureElement","expanded","showLocation","rightElement","sensorKey","scheduleKey","filterPermissionedInstigationState","useInstigationStatusFilter","onStateChanged","useQueryPersistedState","encode","instigationStatus","vals","Array","from","join","undefined","decode","qs","useStaticSetFilter","allValues","match","getKey","renderLabel","getStringValue","AUTOMATION_TYPE_FILTERS","ALL_AUTOMATION_VALUES","values","MergedAutomationRoot","useTrackPageView","useDocumentTitle","allRepos","visibleRepos","loading","workspaceLoading","cachedData","refetch","WorkspaceContext","searchValue","setSearchValue","queryKey","defaults","search","automationTypes","setAutomationTypes","automationFilterState","codeLocationFilter","useCodeLocationFilter","runningStateFilter","automationTypeFilter","repoBuckets","cachedEntries","filter","visibleKeys","visibleRepoKeys","buildBuckets","tagsFilter","useDefinitionTagFilterWithManagedState","allTags","useTagsForObjects","useCallback","repoBucket","flatMap","tags","tagFilterState","filters","button","filterButton","activeFiltersJsx","useFilters","runningState","filteredBuckets","rest","doesFilterArrayMatchValueArray","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","allPermissionedAutomations","allPermissionedAutomationKeys","checkedIds","onToggleFactory","useSelectionReducer","permissionedKeysOnScreen","filteredKeys","checkedAutomations","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","anyAutomationsVisible","height","PageHeader","Heading","horizontal","vertical","TextInput","placeholder","useDisabledButtonTooltipFix","SpinnerWithText","anyReposHidden","CheckAllBox","totalCount","NonIdealState","Body2","href","rel","automation_MergedAutomationRoot","entries","locationEntries","entry","locationOrLoadError","buckets","repo","repositories","buildRepoAddress","sortRepoBuckets","aString","bString","localeCompare","option","repository","repositoryLocation"],"sourceRoot":""}
{"version":3,"file":"static/chunks/1445.93ba1f3ff3ef5af8.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/automation/AutomationAssetSelectionFragment.tsx","webpack://_N_E/../ui-components/src/components/DisclosureTriangleButton.tsx","webpack://_N_E/../ui-core/src/automation/AutomationTargetList.tsx","webpack://_N_E/../ui-core/src/instigation/LiveTickTimeline2.tsx","webpack://_N_E/../ui-core/src/instigation/TickHistory.tsx","webpack://_N_E/../ui-core/src/instigation/util.ts","webpack://_N_E/../ui-core/src/launchpad/useLaunchMultipleRunsWithTelemetry.ts","webpack://_N_E/../ui-core/src/schedules/ScheduleAssetSelectionsQuery.tsx","webpack://_N_E/../ui-core/src/sensors/SensorMonitoredAssets.tsx","webpack://_N_E/../ui-core/src/sensors/SensorResetButton.tsx","webpack://_N_E/../ui-core/src/ticks/DynamicPartitionRequests.tsx","webpack://_N_E/../ui-core/src/ticks/SensorDryRunDialog.tsx","webpack://_N_E/../ui-core/src/ticks/EvaluateTickButtonSensor.tsx","webpack://_N_E/../ui-core/src/sensors/SensorDetails.tsx","webpack://_N_E/../ui-core/src/sensors/SensorFragment.tsx","webpack://_N_E/../ui-core/src/sensors/SensorInfo.tsx","webpack://_N_E/../ui-core/src/sensors/SensorPreviousRuns.tsx","webpack://_N_E/../ui-core/src/sensors/SensorRoot.tsx","webpack://_N_E/../ui-core/src/ticks/DryRunRequestTable.tsx","webpack://_N_E/../ui-core/src/ticks/RunRequestFragment.tsx","webpack://_N_E/../ui-core/src/ticks/TickLogDialog.tsx","webpack://_N_E/../ui-core/src/ticks/TickStatusTag.tsx","webpack://_N_E/../ui-core/src/util/buildExecutionParamsList.ts"],"sourcesContent":["import {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\n\nexport const AUTOMATION_ASSET_SELECTION_FRAGMENT = gql`\n  fragment AutomationAssetSelectionFragment on AssetSelection {\n    assetSelectionString\n    assetsOrError {\n      ... on AssetConnection {\n        nodes {\n          id\n          ...AssetSelectionNodeFragment\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n\n  fragment AssetSelectionNodeFragment on Asset {\n    id\n    key {\n      path\n    }\n    definition {\n      id\n      automationCondition {\n        __typename\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Icon} from './Icon';\nimport {UnstyledButton} from './UnstyledButton';\n\ntype Props = {\n  isOpen: boolean;\n  onToggle: (e: React.MouseEvent<HTMLButtonElement>) => void;\n};\nexport const DisclosureTriangleButton = ({isOpen, onToggle}: Props) => {\n  return (\n    <UnstyledButton\n      onClick={(e) => {\n        onToggle(e);\n      }}\n      style={{cursor: 'pointer', width: 18}}\n    >\n      <Icon\n        name=\"arrow_drop_down\"\n        style={{transform: isOpen ? 'rotate(0deg)' : 'rotate(-90deg)'}}\n      />\n    </UnstyledButton>\n  );\n};\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  Colors,\n  Dialog,\n  DialogFooter,\n  DisclosureTriangleButton,\n  MiddleTruncate,\n  Subtitle2,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  AssetSelectionNodeFragment,\n  AutomationAssetSelectionFragment,\n} from './types/AutomationAssetSelectionFragment.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {displayNameForAssetKey, isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {SensorType} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {VirtualizedItemListForDialog} from '../ui/VirtualizedItemListForDialog';\nimport {numberFormatter} from '../ui/formatters';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\n\ntype AutomationType = 'schedule' | SensorType;\n\nexport const AutomationTargetList = ({\n  assetSelection,\n  automationType,\n  targets,\n  repoAddress,\n}: {\n  automationType: AutomationType;\n  repoAddress: RepoAddress;\n  targets: {pipelineName: string}[] | null;\n  assetSelection: AutomationAssetSelectionFragment | null;\n}) => {\n  const repo = useRepository(repoAddress);\n  if (!targets && !assetSelection) {\n    return <span />;\n  }\n\n  const visibleTargets = targets?.filter((target) => !isHiddenAssetGroupJob(target.pipelineName));\n\n  if (assetSelection) {\n    return <AssetSelectionTag assetSelection={assetSelection} automationType={automationType} />;\n  }\n\n  if (visibleTargets?.length) {\n    return (\n      <Box flex={{direction: 'row', gap: 4}}>\n        {visibleTargets.map((target) =>\n          target.pipelineName ? (\n            <Tag icon=\"job\" tooltipText={target.pipelineName} key={target.pipelineName}>\n              <PipelineReference\n                key={target.pipelineName}\n                pipelineName={target.pipelineName}\n                pipelineHrefContext={repoAddress}\n                isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n              />\n            </Tag>\n          ) : null,\n        )}\n      </Box>\n    );\n  }\n\n  return (\n    <Tag>\n      <div style={{color: Colors.textLight()}}>None</div>\n    </Tag>\n  );\n};\n\nconst ALL_ASSETS_STRING = 'all materializable assets';\n\nconst AssetSelectionTag = ({\n  assetSelection,\n  automationType,\n}: {\n  assetSelection: AutomationAssetSelectionFragment;\n  automationType: AutomationType;\n}) => {\n  const [showAssetSelection, setShowAssetSelection] = useState(false);\n\n  const error =\n    assetSelection.assetsOrError.__typename === 'PythonError' ? assetSelection.assetsOrError : null;\n\n  const sortedAssets = useMemo(() => {\n    if (assetSelection.assetsOrError.__typename === 'PythonError') {\n      return [];\n    }\n    return assetSelection.assetsOrError.nodes\n      .slice()\n      .sort((a, b) =>\n        COMMON_COLLATOR.compare(displayNameForAssetKey(a.key), displayNameForAssetKey(b.key)),\n      );\n  }, [assetSelection.assetsOrError]);\n\n  const assetsWithAMP = useMemo(\n    () => sortedAssets.filter((asset) => !!asset.definition?.automationCondition),\n    [sortedAssets],\n  );\n  const assetsWithoutAMP = useMemo(\n    () => sortedAssets.filter((asset) => !asset.definition?.automationCondition),\n    [sortedAssets],\n  );\n\n  const assetSelectionString = assetSelection.assetSelectionString || '';\n  const isAllAssets = assetSelectionString === ALL_ASSETS_STRING;\n  const firstAsset = sortedAssets[0];\n\n  if (firstAsset && sortedAssets.length === 1) {\n    return (\n      <Tag icon=\"asset\">\n        <Link to={assetDetailsPathForKey(firstAsset.key)}>{assetSelectionString}</Link>\n      </Tag>\n    );\n  }\n\n  return (\n    <>\n      <Dialog\n        isOpen={showAssetSelection}\n        title=\"Targeted assets\"\n        onClose={() => setShowAssetSelection(false)}\n        style={{width: '750px', maxWidth: '80vw', minWidth: '500px'}}\n        canOutsideClickClose\n        canEscapeKeyClose\n      >\n        <Box\n          flex={{direction: 'column'}}\n          style={{height: '50vh', maxHeight: '1000px', minHeight: '400px'}}\n        >\n          {automationType === SensorType.AUTO_MATERIALIZE ||\n          automationType === SensorType.AUTOMATION ? (\n            <>\n              <Section\n                title=\"Assets with a materialization policy\"\n                titleBorder=\"bottom\"\n                assets={assetsWithAMP}\n              />\n              <Section\n                title=\"Assets without a materialization policy\"\n                titleBorder=\"top-and-bottom\"\n                assets={assetsWithoutAMP}\n              />\n            </>\n          ) : (\n            <Section assets={sortedAssets} />\n          )}\n        </Box>\n        <DialogFooter topBorder>\n          <Button\n            intent=\"primary\"\n            onClick={() => {\n              setShowAssetSelection(false);\n            }}\n          >\n            Close\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <Tag\n        icon={sortedAssets.length === 1 ? 'asset' : 'asset_group'}\n        intent={error ? 'danger' : 'none'}\n      >\n        <ButtonLink\n          onClick={() => {\n            if (error) {\n              showCustomAlert({\n                title: 'Python error',\n                body: <PythonErrorInfo error={error} />,\n              });\n            } else {\n              setShowAssetSelection(true);\n            }\n          }}\n          color={error ? Colors.textRed() : Colors.linkDefault()}\n        >\n          {error\n            ? 'Error loading asset selection'\n            : isAllAssets\n              ? 'All materializable assets'\n              : assetSelectionString}\n        </ButtonLink>\n      </Tag>\n    </>\n  );\n};\n\nconst Section = ({\n  assets,\n  title,\n  titleBorder = 'top-and-bottom',\n}: {\n  assets: AssetSelectionNodeFragment[];\n  title?: string;\n  titleBorder?: React.ComponentProps<typeof Box>['border'];\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n  return (\n    <>\n      {title ? (\n        <Box border={titleBorder} padding={{right: 24, vertical: 12}}>\n          <Box\n            flex={{direction: 'row', gap: 4}}\n            style={{cursor: 'pointer'}}\n            onClick={() => {\n              setIsOpen(!isOpen);\n            }}\n          >\n            <DisclosureTriangleButton onToggle={() => {}} isOpen={isOpen} />\n            <Subtitle2>\n              {title} ({numberFormatter.format(assets.length)})\n            </Subtitle2>\n          </Box>\n        </Box>\n      ) : null}\n      {isOpen ? (\n        assets.length ? (\n          <div style={{height: '100%', overflowY: 'hidden'}}>\n            <VirtualizedItemListForDialog\n              padding={0}\n              items={assets}\n              renderItem={(asset) => <VirtualizedSelectedAssetRow asset={asset} key={asset.id} />}\n              itemBorders\n            />\n          </div>\n        ) : (\n          <Box padding={{horizontal: 24, vertical: 12}}>\n            <Caption color={Colors.textLight()}>0 assets</Caption>\n          </Box>\n        )\n      ) : null}\n    </>\n  );\n};\n\nconst VirtualizedSelectedAssetRow = ({asset}: {asset: AssetSelectionNodeFragment}) => {\n  return (\n    <Box\n      flex={{alignItems: 'center', gap: 4}}\n      style={{cursor: 'pointer'}}\n      padding={{horizontal: 24}}\n    >\n      <Link to={assetDetailsPathForKey(asset.key)} target=\"_blank\">\n        <Box style={{overflow: 'hidden'}}>\n          <MiddleTruncate text={displayNameForAssetKey(asset.key)} />\n        </Box>\n      </Link>\n    </Box>\n  );\n};\n","import {Caption, Colors, Tooltip, ifPlural, useViewport} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport {memo, useEffect, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {isStuckStartedTick} from './util';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\n\ndayjs.extend(relativeTime);\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreen(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRed(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavender(),\n  [InstigationTickStatus.SKIPPED]: Colors.backgroundDisabled(),\n};\n\nconst HoverColorMap = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreenHover(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRedHover(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavenderHover(),\n  [InstigationTickStatus.SKIPPED]: Colors.accentGrayHover(),\n};\n\nconst REFRESH_INTERVAL = 100;\n\nconst MIN_WIDTH = 8; // At least 8px wide\n\nconst MINUTE = 60000;\n\nexport const LiveTickTimeline = <T extends HistoryTickFragment | AssetDaemonTickFragment>({\n  ticks,\n  tickResultType,\n  onHoverTick,\n  onSelectTick,\n  exactRange,\n  timeRange = MINUTE * 5, // 5 minutes,\n  tickGrid = MINUTE, // 1 minute\n  timeAfter = MINUTE, // 1 minute\n}: {\n  ticks: T[];\n  tickResultType: TickResultType;\n  onHoverTick: (InstigationTick?: T) => void;\n  onSelectTick: (InstigationTick: T) => void;\n  exactRange?: [number, number];\n  timeRange?: number;\n  tickGrid?: number;\n  timeAfter?: number;\n}) => {\n  const [now, setNow] = useState<number>(Date.now());\n  const [isPaused, setPaused] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isPaused && !exactRange) {\n      const interval = setInterval(() => {\n        setNow(Date.now());\n      }, REFRESH_INTERVAL);\n      return () => clearInterval(interval);\n    }\n    return () => {};\n  }, [exactRange, isPaused]);\n\n  const maxX = exactRange?.[1] ? exactRange[1] * 1000 : now + timeAfter;\n  const minX = exactRange?.[0] ? exactRange[0] * 1000 : now - timeRange;\n  const showNowLine = minX < now && now < maxX;\n\n  const fullRange = maxX - minX;\n\n  const {viewport, containerProps} = useViewport();\n\n  const ticksReversed = useMemo(() => {\n    // Reverse ticks to make tab order correct\n    return ticks.filter((tick) => !tick.endTimestamp || tick.endTimestamp * 1000 > minX).reverse();\n  }, [ticks, minX]);\n\n  const ticksToDisplay = useMemo(() => {\n    return ticksReversed.map((tick, i) => {\n      const startX = getX(1000 * tick.timestamp!, viewport.width, minX, fullRange);\n      const endTimestamp = isStuckStartedTick(tick, ticksReversed.length - i - 1)\n        ? tick.timestamp\n        : tick.endTimestamp\n          ? tick.endTimestamp * 1000\n          : now;\n      const endX = getX(endTimestamp, viewport.width, minX, fullRange);\n      return {\n        ...tick,\n        width: Math.max(endX - startX, MIN_WIDTH),\n        startX,\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minX, now, ticksReversed, fullRange, viewport.width]);\n\n  const timeTickGridDelta = Math.max((maxX - minX) / 25, tickGrid);\n  const tickGridDelta = timeTickGridDelta / 5;\n  const startTickGridX = Math.ceil(minX / tickGridDelta) * tickGridDelta;\n  const numTicks = Math.ceil((maxX - startTickGridX) / tickGridDelta);\n  const numLabels = Math.ceil(numTicks / 5);\n\n  const gridTicks = useMemo(() => {\n    const ticks = [];\n    for (let ii = 0; ii < numTicks; ii++) {\n      const time = startTickGridX + ii * tickGridDelta;\n      ticks.push({\n        time,\n        x: getX(time, viewport.width, minX, fullRange),\n        showLabel: ii % numLabels === 0,\n      });\n    }\n    return ticks;\n  }, [numTicks, startTickGridX, tickGridDelta, viewport.width, minX, fullRange, numLabels]);\n\n  return (\n    <div style={{marginRight: '8px'}}>\n      <div {...containerProps}>\n        <TicksWrapper>\n          {gridTicks.map((tick) => (\n            <GridTick\n              key={tick.time}\n              style={{\n                transform: `translateX(${tick.x}px)`,\n              }}\n            >\n              <GridTickLine />\n              {tick.showLabel ? (\n                <GridTickTime>\n                  <Caption>\n                    <Timestamp timestamp={{ms: tick.time}} timeFormat={{showSeconds: true}} />\n                  </Caption>\n                </GridTickTime>\n              ) : null}\n            </GridTick>\n          ))}\n          {ticksToDisplay.map((tick) => {\n            const count =\n              (tickResultType === 'materializations' || !('runIds' in tick)\n                ? tick.requestedAssetMaterializationCount\n                : tick.runIds?.length) ?? 0;\n            return (\n              <Tick\n                key={tick.id}\n                style={{\n                  transform: `translateX(${tick.startX}px)`,\n                  width: `${tick.width}px`,\n                }}\n                status={tick.status}\n                onMouseEnter={() => {\n                  onHoverTick(tick);\n                  setPaused(true);\n                }}\n                onMouseLeave={() => {\n                  onHoverTick();\n                  setPaused(false);\n                }}\n                onClick={() => {\n                  onSelectTick(tick);\n                }}\n              >\n                <Tooltip content={<TickTooltip tick={tick} tickResultType={tickResultType} />}>\n                  <div style={{width: tick.width + 'px', height: '80px'}}>\n                    {count > 0 ? count : null}\n                  </div>\n                </Tooltip>\n              </Tick>\n            );\n          })}\n          {showNowLine ? (\n            <NowIndicator\n              style={{\n                transform: `translateX(${getX(now, viewport.width, minX, fullRange)}px)`,\n              }}\n            />\n          ) : null}\n        </TicksWrapper>\n        <TimeAxisWrapper></TimeAxisWrapper>\n      </div>\n    </div>\n  );\n};\n\nconst TickTooltip = memo(\n  ({\n    tick,\n    tickResultType,\n  }: {\n    tick: HistoryTickFragment | AssetDaemonTickFragment;\n    tickResultType: TickResultType;\n  }) => {\n    const status = useMemo(() => {\n      if (tick.status === InstigationTickStatus.FAILURE) {\n        return 'Evaluation failed';\n      }\n      if (tick.status === InstigationTickStatus.STARTED) {\n        return 'Evaluating…';\n      }\n      if (tickResultType === 'materializations' || !('runs' in tick)) {\n        return `${tick.requestedAssetMaterializationCount} materialization${ifPlural(\n          tick.requestedAssetMaterializationCount,\n          '',\n          's',\n        )} requested`;\n      } else {\n        return `${tick.runs?.length || 0} run${ifPlural(tick.runs?.length, '', 's')} requested`;\n      }\n    }, [tick, tickResultType]);\n\n    const startTime = dayjs(1000 * tick.timestamp!);\n    const endTime = dayjs(tick.endTimestamp ? 1000 * tick.endTimestamp : Date.now());\n    const elapsedTime = startTime.to(endTime, true);\n\n    return (\n      <div>\n        <Caption as=\"div\">\n          <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showSeconds: true}} />\n        </Caption>\n        <Caption as=\"div\">\n          {status} ({elapsedTime})\n        </Caption>\n        {tick.status === InstigationTickStatus.STARTED ? null : (\n          <Caption color={Colors.textLight()}>Click for details</Caption>\n        )}\n      </div>\n    );\n  },\n);\n\nconst TicksWrapper = styled.div`\n  position: relative;\n  height: 100px;\n  padding: 10px 2px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n`;\n\nconst TimeAxisWrapper = styled.div`\n  height: 24px;\n`;\n\nconst Tick = styled.div<{status: InstigationTickStatus}>`\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  height: 80px;\n  will-change: transform, width;\n  border-radius: 2px;\n  div {\n    place-content: center;\n    display: grid;\n  }\n  color: ${Colors.backgroundDefault()};\n  ${({status}) => `\n    background: ${COLOR_MAP[status]};\n    &:hover {\n      background: ${HoverColorMap[status]};\n    }\n  `}\n`;\n\nconst GridTick = styled.div`\n  position: absolute;\n  top: 0;\n  height: 124px;\n  will-change: transform;\n`;\nconst GridTickLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 108px;\n  width: 1px;\n  background: ${Colors.keylineDefault()};\n`;\nconst GridTickTime = styled.div`\n  height: 16px;\n  position: absolute;\n  bottom: 0;\n  width: 100px;\n  margin-left: -24px;\n`;\n\nconst NowIndicator = styled.div`\n  position: absolute;\n  top: 0;\n  height: 126px;\n  width: 2px;\n  background: ${Colors.accentPrimary()};\n  &:after {\n    content: 'Now';\n    position: absolute;\n    left: 0;\n    background: ${Colors.accentPrimary()};\n    color: ${Colors.accentReversed()};\n    bottom: 0;\n    font-size: 12px;\n    padding: 3px 4px;\n  }\n`;\n\nfunction getX(timestamp: number, viewportWidth: number, minX: number, timeRange: number) {\n  return (viewportWidth * (timestamp - minX)) / timeRange;\n}\n","import 'chartjs-adapter-date-fns';\n\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  Colors,\n  CursorHistoryControls,\n  FontFamily,\n  Icon,\n  IconWrapper,\n  Menu,\n  MenuItem,\n  MiddleTruncate,\n  NonIdealState,\n  Select,\n  Spinner,\n  Subheading,\n  Table,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport {useState} from 'react';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT, RUN_STATUS_FRAGMENT, RunStatusLink} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline2';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {TickHistoryQuery, TickHistoryQueryVariables} from './types/TickHistory.types';\nimport {countPartitionsAddedOrDeleted, isStuckStartedTick} from './util';\nimport {gql, useQuery} from '../apollo-client';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n  InstigationType,\n} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {TimeElapsed} from '../runs/TimeElapsed';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TickResultType, TickStatusTag} from '../ticks/TickStatusTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = HistoryTickFragment;\n\nconst PAGE_SIZE = 25;\n\nenum TickStatusDisplay {\n  ALL = 'all',\n  FAILED = 'failed',\n  SUCCESS = 'success',\n}\n\nconst STATUS_DISPLAY_MAP = {\n  [TickStatusDisplay.ALL]: [\n    InstigationTickStatus.SUCCESS,\n    InstigationTickStatus.FAILURE,\n    InstigationTickStatus.STARTED,\n    InstigationTickStatus.SKIPPED,\n  ],\n  [TickStatusDisplay.FAILED]: [InstigationTickStatus.FAILURE],\n  [TickStatusDisplay.SUCCESS]: [InstigationTickStatus.SUCCESS],\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n  tickResultType,\n  setTimerange,\n  setParentStatuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tickResultType: TickResultType;\n  tabs?: React.ReactElement;\n  setTimerange?: (range?: [number, number]) => void;\n  setParentStatuses?: (statuses?: InstigationTickStatus[]) => void;\n}) => {\n  const [tickStatus, setTickStatus] = useQueryPersistedState<TickStatusDisplay>({\n    queryKey: 'status',\n    defaults: {status: TickStatusDisplay.ALL},\n  });\n\n  const [showDetailsForTick, setShowDetailsForTick] = useState<HistoryTickFragment | null>(null);\n  const [showLogsForTick, setShowLogsForTick] = useState<HistoryTickFragment | null>(null);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = React.useMemo(\n    () => STATUS_DISPLAY_MAP[tickStatus] || STATUS_DISPLAY_MAP[TickStatusDisplay.ALL],\n    [tickStatus],\n  );\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const state = queryResult?.data?.instigationStateOrError;\n  const ticks = React.useMemo(\n    () => (state?.__typename === 'InstigationState' ? state.ticks : []),\n    [state],\n  );\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange?.([start, end]);\n        }\n      }\n    } else {\n      setTimerange?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, ticks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses?.(Array.from(statuses));\n    } else {\n      setParentStatuses?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor && !ticks.length && !queryResult.loading) {\n      paginationProps.reset();\n    }\n    // paginationProps.reset isn't memoized\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ticks, queryResult.loading, paginationProps.hasPrevCursor]);\n\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 48}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && tickStatus === TickStatusDisplay.ALL) {\n    return null;\n  }\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={tickStatus} onChange={setTickStatus} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <TableWrapper>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              <th style={{width: 90}}>Duration</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Result</th>\n              <th style={{width: 80}}>Logs</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick, index) => (\n              <TickRow\n                key={tick.id}\n                tick={tick}\n                tickResultType={tickResultType}\n                instigationSelector={instigationSelector}\n                index={index}\n                onShowDetails={setShowDetailsForTick}\n                onShowLogs={setShowLogsForTick}\n              />\n            ))}\n          </tbody>\n        </TableWrapper>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n      <TickDetailsDialog\n        isOpen={!!showDetailsForTick}\n        tickId={showDetailsForTick?.tickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n        onClose={() => setShowDetailsForTick(null)}\n      />\n      <TickLogDialog\n        isOpen={!!showLogsForTick}\n        tickId={showLogsForTick?.tickId ?? null}\n        timestamp={showLogsForTick?.timestamp}\n        instigationSelector={instigationSelector}\n        onClose={() => setShowLogsForTick(null)}\n      />\n    </>\n  );\n};\n\nconst StatusFilter = ({\n  status,\n  onChange,\n}: {\n  status: TickStatusDisplay;\n  onChange: (value: TickStatusDisplay) => void;\n}) => {\n  const items = [\n    {key: TickStatusDisplay.ALL, label: 'All ticks'},\n    {key: TickStatusDisplay.SUCCESS, label: 'Requested'},\n    {key: TickStatusDisplay.FAILED, label: 'Failed'},\n  ];\n  const activeItem = items.find(({key}) => key === status);\n  return (\n    <Select<(typeof items)[0]>\n      popoverProps={{position: 'bottom-right'}}\n      filterable={false}\n      activeItem={activeItem}\n      items={items}\n      itemRenderer={(item, props) => {\n        return (\n          <MenuItem\n            active={props.modifiers.active}\n            onClick={props.handleClick}\n            key={item.key}\n            text={item.label}\n            style={{width: '300px'}}\n          />\n        );\n      }}\n      itemListRenderer={({renderItem, filteredItems}) => {\n        const renderedItems = filteredItems.map(renderItem).filter(Boolean);\n        return <Menu>{renderedItems}</Menu>;\n      }}\n      onItemSelect={(item) => onChange(item.key)}\n    >\n      <Button\n        rightIcon={<Icon name=\"arrow_drop_down\" />}\n        style={{minWidth: '200px', display: 'flex', justifyContent: 'space-between'}}\n      >\n        {activeItem?.label}\n      </Button>\n    </Select>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  tickResultType,\n  onHighlightRunIds,\n  beforeTimestamp,\n  afterTimestamp,\n  statuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n  beforeTimestamp?: number;\n  afterTimestamp?: number;\n  statuses?: InstigationTickStatus[];\n  tickResultType: TickResultType;\n}) => {\n  const [selectedTickId, setSelectedTickId] = useQueryPersistedState<string | undefined>({\n    encode: (tickId) => ({tickId}),\n    decode: (qs) => qs['tickId'] ?? undefined,\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(TICK_HISTORY_QUERY, {\n    variables: {\n      instigationSelector,\n      beforeTimestamp,\n      afterTimestamp,\n      statuses,\n      limit: beforeTimestamp ? undefined : 15,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useQueryRefreshAtInterval(\n    queryResult,\n    1000,\n    !(pollingPaused || (beforeTimestamp && afterTimestamp)),\n  );\n  const {data, error} = queryResult;\n\n  if (!data || error) {\n    return (\n      <>\n        <Box padding={{top: 16, horizontal: 24}} border=\"bottom\">\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  // Set it equal to an empty array in case of a weird error\n  // https://elementl-workspace.slack.com/archives/C03CCE471E0/p1693237968395179?thread_ts=1693233109.602669&cid=C03CCE471E0\n  const {ticks = []} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTickId(tick ? tick.tickId : undefined);\n  };\n\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      if (onHighlightRunIds) {\n        onHighlightRunIds(tick.runIds);\n      }\n      pausePolling(true);\n    }\n  };\n\n  return (\n    <>\n      <TickDetailsDialog\n        isOpen={!!selectedTickId}\n        tickId={selectedTickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border=\"top\">\n        <LiveTickTimeline\n          ticks={ticks}\n          tickResultType={tickResultType}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n          exactRange={\n            beforeTimestamp && afterTimestamp ? [afterTimestamp, beforeTimestamp] : undefined\n          }\n        />\n      </Box>\n    </>\n  );\n};\n\nfunction TickRow({\n  tick,\n  tickResultType,\n  index,\n  onShowDetails,\n  onShowLogs,\n}: {\n  tick: HistoryTickFragment;\n  tickResultType: TickResultType;\n  instigationSelector: InstigationSelector;\n  index: number;\n  onShowDetails: (tick: HistoryTickFragment) => void;\n  onShowLogs: (tick: HistoryTickFragment) => void;\n}) {\n  const copyToClipboard = useCopyToClipboard();\n\n  const [addedPartitions, deletedPartitions] = React.useMemo(() => {\n    const requests = tick.dynamicPartitionsRequestResults;\n    const added = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.ADD_PARTITIONS,\n    );\n    const deleted = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.DELETE_PARTITIONS,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  const isStuckStarted = isStuckStartedTick(tick, index);\n\n  return (\n    <tr>\n      <td>\n        <TimestampDisplay\n          timestamp={tick.timestamp}\n          timeFormat={{showTimezone: false, showSeconds: true}}\n        />\n      </td>\n      <td>\n        <TickStatusTag\n          tick={tick}\n          tickResultType={tickResultType}\n          isStuckStarted={isStuckStarted}\n        />\n      </td>\n      <td>\n        {isStuckStarted ? (\n          '- '\n        ) : (\n          <TimeElapsed\n            startUnix={tick.timestamp}\n            endUnix={tick.endTimestamp || Date.now() / 1000}\n          />\n        )}\n      </td>\n      {tick.instigationType === InstigationType.SENSOR ? (\n        <td>\n          {tick.cursor ? (\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <div\n                style={{\n                  fontFamily: FontFamily.monospace,\n                  fontSize: '14px',\n                  maxWidth: '400px',\n                  overflow: 'hidden',\n                }}\n              >\n                <MiddleTruncate text={tick.cursor || ''} />\n              </div>\n              <CopyButton\n                onClick={async () => {\n                  copyToClipboard(tick.cursor || '');\n                  await showSharedToaster({\n                    message: <div>Copied value</div>,\n                    intent: 'success',\n                  });\n                }}\n              >\n                <Icon name=\"assignment\" />\n              </CopyButton>\n            </Box>\n          ) : (\n            <>&mdash;</>\n          )}\n        </td>\n      ) : null}\n      <td>\n        <Box flex={{direction: 'column', gap: 6}}>\n          {tickResultType === 'runs' ? (\n            <Box flex={{alignItems: 'center', gap: 8}}>\n              <ButtonLink onClick={() => onShowDetails(tick)}>\n                {tick.runIds.length === 1\n                  ? '1 run requested'\n                  : `${tick.runIds.length} runs requested`}\n              </ButtonLink>\n              {tick.runs.length === 1\n                ? tick.runs.map((run) => (\n                    <React.Fragment key={run.id}>\n                      <RunStatusLink run={run} />\n                    </React.Fragment>\n                  ))\n                : null}\n            </Box>\n          ) : (\n            <Box flex={{alignItems: 'center', gap: 8}}>\n              <ButtonLink onClick={() => onShowDetails(tick)}>\n                {tick.requestedAssetMaterializationCount === 1\n                  ? '1 materialization requested'\n                  : `${tick.requestedAssetMaterializationCount} materializations requested`}\n              </ButtonLink>\n            </Box>\n          )}\n          {addedPartitions || deletedPartitions ? (\n            <Caption>\n              (\n              {addedPartitions ? (\n                <span>\n                  {addedPartitions} partition{ifPlural(addedPartitions, '', 's')} created\n                  {deletedPartitions ? ',' : ''}\n                </span>\n              ) : null}\n              {deletedPartitions ? (\n                <span>\n                  {deletedPartitions} partition{ifPlural(deletedPartitions, '', 's')} deleted,\n                </span>\n              ) : null}\n              )\n            </Caption>\n          ) : null}\n        </Box>\n      </td>\n      <td>\n        <Button onClick={() => onShowLogs(tick)}>View logs</Button>\n      </td>\n    </tr>\n  );\n}\n\nconst TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        ticks(\n          dayRange: $dayRange\n          limit: $limit\n          cursor: $cursor\n          statuses: $statuses\n          beforeTimestamp: $beforeTimestamp\n          afterTimestamp: $afterTimestamp\n        ) {\n          id\n          ...HistoryTick\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n\nconst CopyButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 8px;\n  margin: -6px;\n  outline: none;\n\n  ${IconWrapper} {\n    background-color: ${Colors.accentGray()};\n    transition: background-color 100ms;\n  }\n\n  &:hover ${IconWrapper} {\n    background-color: ${Colors.accentGrayHover()};\n  }\n\n  &:focus ${IconWrapper} {\n    background-color: ${Colors.linkDefault()};\n  }\n`;\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationTick,\n  InstigationTickStatus,\n} from '../graphql/types';\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst THREE_DAYS = 60 * 60 * 24 * 3;\n\nexport const truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nexport function isStuckStartedTick(\n  tick: Pick<InstigationTick, 'timestamp' | 'endTimestamp' | 'status'>,\n  index: number,\n) {\n  return (\n    !tick.endTimestamp &&\n    // If the index is 0 and the tick does have an end timestamp then we can't know if its actually stuck or still in progress\n    // but if its older than three days then its very likely stuck\n    ((index !== 0 && tick.status === InstigationTickStatus.STARTED) ||\n      tick.timestamp * 1000 < Date.now() - THREE_DAYS)\n  );\n}\n\nexport function countPartitionsAddedOrDeleted(\n  requests: Pick<DynamicPartitionsRequestResult, 'partitionKeys' | 'type'>[],\n  type: DynamicPartitionsRequestType,\n) {\n  return requests.reduce((sum, request) => {\n    if (request.type === type) {\n      return sum + (request.partitionKeys?.length || 0);\n    }\n    return sum;\n  }, 0);\n}\n","import {useCallback} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {showLaunchError} from './showLaunchError';\nimport {useMutation} from '../apollo-client';\nimport {TelemetryAction, useTelemetryAction} from '../app/Telemetry';\nimport {\n  LAUNCH_MULTIPLE_RUNS_MUTATION,\n  LaunchBehavior,\n  handleLaunchMultipleResult,\n} from '../runs/RunUtils';\nimport {\n  LaunchMultipleRunsMutation,\n  LaunchMultipleRunsMutationVariables,\n} from '../runs/types/RunUtils.types';\n\nexport function useLaunchMultipleRunsWithTelemetry() {\n  const [launchMultipleRuns] = useMutation<\n    LaunchMultipleRunsMutation,\n    LaunchMultipleRunsMutationVariables\n  >(LAUNCH_MULTIPLE_RUNS_MUTATION);\n\n  const logTelemetry = useTelemetryAction();\n  const history = useHistory();\n\n  return useCallback(\n    async (\n      variables: LaunchMultipleRunsMutationVariables,\n      behavior: LaunchBehavior,\n      jobName: string,\n    ) => {\n      try {\n        const executionParamsList = Array.isArray(variables.executionParamsList)\n          ? variables.executionParamsList\n          : [variables.executionParamsList];\n\n        let jobNames = executionParamsList.map(\n          (params) => params.selector.jobName || params.selector.pipelineName,\n        );\n\n        // if only executing one job, and jobName isn't defined, fallback to jobName from sensor/schedule\n        if (executionParamsList.length === 1 && !executionParamsList[0]?.selector?.jobName) {\n          jobNames = [jobName];\n          executionParamsList[0]!.selector.jobName = jobName;\n        }\n\n        if (\n          jobNames.length !== executionParamsList.length ||\n          jobNames.includes(undefined) ||\n          jobNames.includes(null)\n        ) {\n          throw new Error(\n            'Error: Invalid job names. Each RunRequest must specify a job name to launch all runs',\n          );\n        }\n\n        const metadata: {[key: string]: string | string[] | null | undefined} = {\n          jobNames: jobNames.filter((name): name is string => name !== undefined),\n          opSelection: undefined,\n        };\n\n        const result = (await launchMultipleRuns({variables})).data?.launchMultipleRuns;\n        if (result) {\n          handleLaunchMultipleResult(result, history, {behavior});\n          logTelemetry(\n            TelemetryAction.LAUNCH_MULTIPLE_RUNS,\n            metadata as {[key: string]: string | string[] | null | undefined},\n          );\n        }\n\n        return result;\n      } catch (error) {\n        console.error('error', error);\n        showLaunchError(error as Error);\n      }\n      return undefined;\n    },\n    [history, launchMultipleRuns, logTelemetry],\n  );\n}\n","import {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {AUTOMATION_ASSET_SELECTION_FRAGMENT} from '../automation/AutomationAssetSelectionFragment';\n\nexport const SCHEDULE_ASSET_SELECTIONS_QUERY = gql`\n  query ScheduleAssetSelectionQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        assetSelection {\n          ...AutomationAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${AUTOMATION_ASSET_SELECTION_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {AssetLink} from '../assets/AssetLink';\nimport {SensorMetadata} from '../graphql/types';\n\nexport const SensorMonitoredAssets = ({metadata}: {metadata: SensorMetadata | undefined}) => {\n  if (!metadata?.assetKeys?.length) {\n    return <span />;\n  }\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {metadata.assetKeys.map((key) => (\n        <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n      ))}\n    </Box>\n  );\n};\n","import {Button, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RESET_SENSOR_MUTATION, displaySensorMutationErrors} from './SensorMutations';\nimport {useMutation} from '../apollo-client';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {ResetSensorMutation, ResetSensorMutationVariables} from './types/SensorMutations.types';\nimport {DEFAULT_DISABLED_REASON, usePermissionsForLocation} from '../app/Permissions';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n}\n\nexport const SensorResetButton = ({repoAddress, sensor}: Props) => {\n  const {\n    permissions: {canStartSensor, canStopSensor},\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const {name} = sensor;\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName: name,\n  };\n\n  const [resetSensor, {loading: toggleOnInFlight}] = useMutation<\n    ResetSensorMutation,\n    ResetSensorMutationVariables\n  >(RESET_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const onClick = () => {\n    resetSensor({variables: {sensorSelector}});\n  };\n\n  const hasPermission = canStartSensor && canStopSensor;\n  const disabled = toggleOnInFlight || !hasPermission;\n  const tooltipContent = hasPermission\n    ? `In code, a default status for \"${name}\" has been set to \"${sensor.defaultStatus}\". Click here to reset the sensor status to track the status set in code.`\n    : DEFAULT_DISABLED_REASON;\n\n  return (\n    <Tooltip\n      content={<div style={{maxWidth: '500px', wordBreak: 'break-word'}}>{tooltipContent}</div>}\n      display=\"flex\"\n    >\n      <Button disabled={disabled} onClick={onClick}>\n        Reset sensor status\n      </Button>\n    </Tooltip>\n  );\n};\n","import {Box, Colors, Icon, Subheading, Table, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {DynamicPartitionRequestFragment} from './types/SensorDryRunDialog.types';\nimport {DynamicPartitionsRequestType} from '../graphql/types';\n\nexport function DynamicPartitionRequests({\n  includeTitle = true,\n  requests,\n}: {\n  includeTitle?: boolean;\n  requests: Pick<DynamicPartitionRequestFragment, 'partitionKeys' | 'partitionsDefName' | 'type'>[];\n}) {\n  const rows = useMemo(() => {\n    if (!requests.length) {\n      return [];\n    }\n    const rows: {key: string; def: string; type: DynamicPartitionsRequestType}[] = [];\n    requests.forEach(({partitionKeys, partitionsDefName, type}) => {\n      partitionKeys?.forEach((key) => {\n        rows.push({\n          key,\n          def: partitionsDefName,\n          type,\n        });\n      });\n    });\n    return rows;\n  }, [requests]);\n\n  if (!rows.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'column', gap: 12, grow: 1}}>\n      {includeTitle ? (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          <Icon name=\"partition\" />\n          <Subheading>Dynamic Partition Requests</Subheading>\n        </Box>\n      ) : null}\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`}}>\n        <thead>\n          <tr>\n            <th>Partition</th>\n            <th>Partition definition</th>\n            <th>Requested change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({key, def, type}, index) => {\n            return (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{def}</td>\n                <td>\n                  {type === DynamicPartitionsRequestType.ADD_PARTITIONS ? (\n                    <Tag intent=\"success\">\n                      <span>Add Partition</span>\n                    </Tag>\n                  ) : (\n                    <Tag intent=\"danger\">\n                      <span>Delete Partition</span>\n                    </Tag>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  NonIdealStateWrapper,\n  Spinner,\n  Subheading,\n  Tag,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {DynamicPartitionRequests} from './DynamicPartitionRequests';\nimport {RUN_REQUEST_FRAGMENT} from './RunRequestFragment';\nimport {gql, useMutation} from '../apollo-client';\nimport {\n  SensorDryRunMutation,\n  SensorDryRunMutationVariables,\n} from './types/SensorDryRunDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {useTrackEvent} from '../app/analytics';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {SensorSelector} from '../graphql/types';\nimport {useLaunchMultipleRunsWithTelemetry} from '../launchpad/useLaunchMultipleRunsWithTelemetry';\nimport {SET_CURSOR_MUTATION} from '../sensors/EditCursorDialog';\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from '../sensors/types/EditCursorDialog.types';\nimport {testId} from '../testing/testId';\nimport {buildExecutionParamsListSensor} from '../util/buildExecutionParamsList';\nimport {RepoAddress} from '../workspace/types';\n\nexport type SensorDryRunInstigationTick = Extract<\n  SensorDryRunMutation['sensorDryRun'],\n  {__typename: 'DryRunInstigationTick'}\n>;\n\ntype Props = {\n  name: string;\n  onClose: () => void;\n  repoAddress: RepoAddress;\n  currentCursor: string;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const SensorDryRunDialog = (props: Props) => {\n  const {isOpen, onClose, name} = props;\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      icon=\"preview_tick\"\n      title={`Preview tick result for ${name}`}\n    >\n      <SensorDryRun {...props} />\n    </Dialog>\n  );\n};\n\nconst SensorDryRun = ({repoAddress, name, currentCursor, onClose, jobName}: Props) => {\n  const trackEvent = useTrackEvent();\n\n  const [sensorDryRun] = useMutation<SensorDryRunMutation, SensorDryRunMutationVariables>(\n    EVALUATE_SENSOR_MUTATION,\n  );\n  const [setCursorMutation] = useMutation<\n    SetSensorCursorMutation,\n    SetSensorCursorMutationVariables\n  >(SET_CURSOR_MUTATION);\n\n  const [cursor, setCursor] = useState(currentCursor);\n\n  const [submitting, setSubmitting] = useState(false);\n  const [launching, setLaunching] = useState(false);\n  const [error, setError] = useState<PythonErrorFragment | null>(null);\n  const [sensorExecutionData, setSensorExecutionData] =\n    useState<SensorDryRunInstigationTick | null>(null);\n\n  const sensorSelector: SensorSelector = useMemo(\n    () => ({\n      sensorName: name,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [repoAddress, name],\n  );\n\n  const executionParamsList = useMemo(\n    () =>\n      sensorExecutionData && sensorSelector\n        ? buildExecutionParamsListSensor(sensorExecutionData, sensorSelector)\n        : [],\n    [sensorSelector, sensorExecutionData],\n  );\n\n  const submitTest = useCallback(async () => {\n    setSubmitting(true);\n    const result = await sensorDryRun({\n      variables: {\n        selectorData: sensorSelector,\n        cursor,\n      },\n    });\n    const data = result.data?.sensorDryRun;\n    if (data) {\n      if (data?.__typename === 'DryRunInstigationTick') {\n        if (data.evaluationResult?.error) {\n          setError(data.evaluationResult.error);\n        } else {\n          setSensorExecutionData(data);\n        }\n      } else if (data?.__typename === 'SensorNotFoundError') {\n        showCustomAlert({\n          title: 'Sensor not found',\n          body: `Could not find a sensor named: ${name}`,\n        });\n      } else {\n        setError(data);\n      }\n    } else {\n      assertUnreachable('sensorDryRun Mutation returned no data??' as never);\n    }\n    setSubmitting(false);\n  }, [sensorDryRun, sensorSelector, cursor, name]);\n\n  const onCommitTickResult = useCallback(async () => {\n    const cursor = sensorExecutionData?.evaluationResult?.cursor;\n    if (!cursor) {\n      return;\n    }\n    const {data} = await setCursorMutation({\n      variables: {sensorSelector, cursor},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.accentReversed()}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n  }, [sensorExecutionData?.evaluationResult?.cursor, sensorSelector, setCursorMutation]);\n\n  const launchMultipleRunsWithTelemetry = useLaunchMultipleRunsWithTelemetry();\n\n  const canLaunchAll = useMemo(() => {\n    return executionParamsList != null && executionParamsList.length > 0;\n  }, [executionParamsList]);\n\n  const onLaunchAll = useCallback(async () => {\n    if (!canLaunchAll) {\n      return;\n    }\n\n    trackEvent('launch-all-sensor');\n    setLaunching(true);\n\n    try {\n      if (executionParamsList) {\n        await launchMultipleRunsWithTelemetry({executionParamsList}, 'toast', jobName);\n        onCommitTickResult(); // persist tick\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    setLaunching(false);\n    onClose();\n  }, [\n    canLaunchAll,\n    executionParamsList,\n    jobName,\n    launchMultipleRunsWithTelemetry,\n    onClose,\n    onCommitTickResult,\n    trackEvent,\n  ]);\n\n  const leftButtons = useMemo(() => {\n    if (launching) {\n      return null;\n    }\n\n    if (sensorExecutionData || error) {\n      return (\n        <Button\n          icon={<Icon name=\"settings_backup_restore\" />}\n          data-testid={testId('try-again')}\n          onClick={() => {\n            setSensorExecutionData(null);\n            setError(null);\n          }}\n        >\n          Try again\n        </Button>\n      );\n    } else {\n      return null;\n    }\n  }, [launching, sensorExecutionData, error]);\n\n  const rightButtons = useMemo(() => {\n    if (launching) {\n      return <Box flex={{direction: 'row', gap: 8}}></Box>;\n    }\n\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n\n      if (error) {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n          </Box>\n        );\n      } else if (didSkip) {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n\n            <Tooltip content=\"Commits tick result\" placement=\"top-end\">\n              <Button\n                icon={<Icon name=\"check_filled\" />}\n                intent=\"primary\"\n                onClick={onCommitTickResult}\n                data-testid={testId('commit-tick-result')}\n              >\n                <div>Commit tick result</div>\n              </Button>\n            </Tooltip>\n          </Box>\n        );\n      } else {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n            <Tooltip\n              canShow={!canLaunchAll || launching}\n              content=\"Launches all runs and commits tick result\"\n              placement=\"top-end\"\n            >\n              <Button\n                icon={<Icon name=\"check_filled\" />}\n                intent=\"primary\"\n                disabled={!canLaunchAll || launching}\n                onClick={onLaunchAll}\n                data-testid={testId('launch-all')}\n              >\n                <div>Launch all & commit tick result</div>\n              </Button>\n            </Tooltip>\n          </Box>\n        );\n      }\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={submitTest} intent=\"primary\" data-testid={testId('continue')}>\n            Continue\n          </Button>\n        </Box>\n      );\n    }\n  }, [\n    launching,\n    sensorExecutionData,\n    error,\n    submitting,\n    onClose,\n    onCommitTickResult,\n    canLaunchAll,\n    onLaunchAll,\n    submitTest,\n  ]);\n\n  const content = useMemo(() => {\n    if (launching) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Launching runs</div>\n        </Box>\n      );\n    }\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n      const dynamicPartitionRequests =\n        sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Grid>\n            <div>\n              <Subheading>Result</Subheading>\n              <Box flex={{grow: 1, alignItems: 'center'}}>\n                <div>\n                  {error ? (\n                    <Tag intent=\"danger\">Failed</Tag>\n                  ) : numRunRequests ? (\n                    <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                  ) : (\n                    <Tag intent=\"warning\">Skipped</Tag>\n                  )}\n                </div>\n              </Box>\n            </div>\n            <div>\n              <Subheading>Used cursor value</Subheading>\n              <pre>{cursor?.length ? cursor : 'None'}</pre>\n            </div>\n          </Grid>\n          <Box>\n            {error ? (\n              <div>\n                <PythonErrorInfo error={error} />\n              </div>\n            ) : null}\n            {didSkip ? (\n              <Box flex={{direction: 'column', gap: 8}}>\n                <Subheading style={{marginBottom: 8}}>Requested runs (0)</Subheading>\n                <div>\n                  <SkipReasonNonIdealStateWrapper>\n                    <NonIdealState\n                      icon=\"missing\"\n                      title=\"No runs requested\"\n                      description={\n                        <>\n                          <span>\n                            The sensor function was successfully evaluated but didn&apos;t return\n                            any run requests.\n                          </span>\n                          <span>\n                            <br />\n                            Skip reason:{' '}\n                            {sensorExecutionData?.evaluationResult?.skipReason\n                              ? `\"${sensorExecutionData.evaluationResult.skipReason}\"`\n                              : 'No skip reason was output'}\n                          </span>\n                        </>\n                      }\n                    />\n                  </SkipReasonNonIdealStateWrapper>\n                </div>\n              </Box>\n            ) : null}\n            {numRunRequests && runRequests ? (\n              <Box flex={{direction: 'column', gap: 8}}>\n                <Subheading>Requested runs ({numRunRequests})</Subheading>\n                <RunRequestTable\n                  runRequests={runRequests}\n                  name={name}\n                  jobName={jobName}\n                  isJob={true}\n                  repoAddress={repoAddress}\n                />\n              </Box>\n            ) : null}\n            {dynamicPartitionRequests?.length ? (\n              <div style={{marginTop: '24px'}}>\n                <DynamicPartitionRequests requests={dynamicPartitionRequests} />\n              </div>\n            ) : null}\n          </Box>\n\n          <ComputedCursorGrid>\n            <Subheading>Computed cursor value</Subheading>\n            <pre>\n              {sensorExecutionData?.evaluationResult?.cursor?.length\n                ? sensorExecutionData?.evaluationResult.cursor\n                : error\n                  ? 'Error'\n                  : 'None'}\n            </pre>\n          </ComputedCursorGrid>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Evaluating sensor</div>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>Cursor value (optional)</div>\n          <TextInput\n            value={cursor}\n            onChange={(e) => setCursor(e.target.value)}\n            data-testid={testId('cursor-input')}\n            placeholder=\"Enter a cursor value\"\n          />\n          <div>\n            A cursor tracks where a sensor left off, allowing the sensor to efficiently process new\n            changes or events without missing anything or duplicating work. The cursor is typically\n            a string, and can be updated within the sensor&apos;s logic to reflect the latest state.\n          </div>\n          <div>\n            <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#idempotence-and-cursors\">\n              Learn more\n            </a>{' '}\n            about cursors\n          </div>\n        </Box>\n      );\n    }\n  }, [sensorExecutionData, error, submitting, launching, name, jobName, repoAddress, cursor]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      <DialogFooter topBorder left={leftButtons}>\n        {rightButtons}\n      </DialogFooter>\n    </>\n  );\n};\n\nexport const EVALUATE_SENSOR_MUTATION = gql`\n  mutation SensorDryRunMutation($selectorData: SensorSelector!, $cursor: String) {\n    sensorDryRun(selectorData: $selectorData, cursor: $cursor) {\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          cursor\n          runRequests {\n            ...RunRequestFragment\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n          dynamicPartitionsRequests {\n            ...DynamicPartitionRequestFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment DynamicPartitionRequestFragment on DynamicPartitionRequest {\n    partitionKeys\n    partitionsDefName\n    type\n  }\n\n  ${RUN_REQUEST_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n\nconst ComputedCursorGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  padding-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n\nconst SkipReasonNonIdealStateWrapper = styled.div`\n  ${NonIdealStateWrapper} {\n    margin: auto !important;\n    width: unset !important;\n    max-width: unset !important;\n  }\n`;\n","import {Box, Button, Icon, Tooltip} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {SensorDryRunDialog} from './SensorDryRunDialog';\nimport {SensorType} from '../graphql/types';\nimport {RepoAddress} from '../workspace/types';\n\ninterface EvaluateTickButtonSensorProps {\n  cursor: string;\n  name: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  sensorType: SensorType;\n}\n\nexport const EvaluateTickButtonSensor = ({\n  cursor,\n  name,\n  repoAddress,\n  jobName,\n  sensorType,\n}: EvaluateTickButtonSensorProps) => {\n  const [showTestTickDialog, setShowTestTickDialog] = useState(false);\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n      <Tooltip\n        canShow={sensorType !== SensorType.STANDARD}\n        content=\"Testing not available for this sensor type\"\n        placement=\"top-end\"\n      >\n        <Button\n          disabled={sensorType !== SensorType.STANDARD}\n          onClick={() => setShowTestTickDialog(true)}\n          icon={<Icon name=\"preview_tick\" />}\n        >\n          Preview tick result\n        </Button>\n      </Tooltip>\n      <SensorDryRunDialog\n        isOpen={showTestTickDialog}\n        onClose={() => setShowTestTickDialog(false)}\n        currentCursor={cursor}\n        name={name}\n        repoAddress={repoAddress}\n        jobName={jobName}\n      />\n    </Box>\n  );\n};\n","import {\n  Box,\n  Button,\n  FontFamily,\n  Heading,\n  Icon,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorMonitoredAssets} from './SensorMonitoredAssets';\nimport {SensorResetButton} from './SensorResetButton';\nimport {SensorSwitch} from './SensorSwitch';\nimport {EvaluateTickButtonSensor} from '../ticks/EvaluateTickButtonSensor';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {AutomationAssetSelectionFragment} from '../automation/types/AutomationAssetSelectionFragment.types';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RepoAddress} from '../workspace/types';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails = ({\n  sensor,\n  repoAddress,\n  daemonHealth,\n  refreshState,\n  assetSelection,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n  assetSelection: AutomationAssetSelectionFragment | null;\n}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    metadata,\n  } = sensor;\n\n  const {\n    permissions,\n    disabledReasons,\n    loading: loadingPermissions,\n  } = usePermissionsForLocation(repoAddress.location);\n  const {canUpdateSensorCursor} = permissions;\n\n  const [isCursorEditing, setCursorEditing] = useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Heading style={{display: 'flex', flexDirection: 'row', gap: 4}}>\n            <Link to=\"/automation\">Automation</Link>\n            <span>/</span>\n            {name}\n          </Heading>\n        }\n        icon=\"sensors\"\n        tags={\n          <Tag icon=\"sensors\">\n            Sensor in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        right={\n          <Box margin={{top: 4}} flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            <EvaluateTickButtonSensor\n              cursor={cursor || ''}\n              name={sensor.name}\n              repoAddress={repoAddress}\n              jobName={sensor.targets?.[0]?.pipelineName || ''}\n              sensorType={sensor.sensorType}\n            />\n          </Box>\n        }\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} timeFormat={TIME_FORMAT} />\n                    <TickStatusTag tick={latestTick} tickResultType=\"runs\" />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.nextTick && daemonHealth && running && (\n            <tr>\n              <td>Next tick</td>\n              <td>\n                <TimestampDisplay timestamp={sensor.nextTick.timestamp!} timeFormat={TIME_FORMAT} />\n              </td>\n            </tr>\n          )}\n          {(sensor.targets && sensor.targets.length) || assetSelection ? (\n            <tr>\n              <td>Target</td>\n              <TargetCell>\n                <AutomationTargetList\n                  targets={sensor.targets}\n                  repoAddress={repoAddress}\n                  assetSelection={assetSelection || null}\n                  automationType={sensor.sensorType}\n                />\n              </TargetCell>\n            </tr>\n          ) : null}\n          <tr>\n            <td>\n              <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                Running\n              </Box>\n            </td>\n            <td>\n              <Box\n                flex={{direction: 'row', gap: 12, alignItems: 'center'}}\n                style={{height: '32px'}}\n              >\n                <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n                {sensor.canReset && <SensorResetButton repoAddress={repoAddress} sensor={sensor} />}\n              </Box>\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored assets</td>\n              <td>\n                <SensorMonitoredAssets metadata={metadata} />\n              </td>\n            </tr>\n          ) : null}\n          {sensor.sensorType !== SensorType.AUTO_MATERIALIZE &&\n          sensor.sensorType !== SensorType.AUTOMATION ? (\n            <tr>\n              <td>\n                <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                  Cursor\n                </Box>\n              </td>\n              <td>\n                <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                  <span style={{fontFamily: FontFamily.monospace, fontSize: '14px'}}>\n                    {cursor ? cursor : 'None'}\n                  </span>\n                  <Tooltip\n                    canShow={!canUpdateSensorCursor}\n                    content={disabledReasons.canUpdateSensorCursor}\n                  >\n                    <Button\n                      icon={<Icon name=\"edit\" />}\n                      disabled={!canUpdateSensorCursor || loadingPermissions}\n                      onClick={() => setCursorEditing(true)}\n                    >\n                      Edit\n                    </Button>\n                  </Tooltip>\n                </Box>\n                <EditCursorDialog\n                  isOpen={isCursorEditing}\n                  sensorSelector={sensorSelector}\n                  cursor={cursor ? cursor : ''}\n                  onClose={() => setCursorEditing(false)}\n                />\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n\nconst TargetCell = styled.td`\n  button {\n    line-height: 20px;\n  }\n`;\n","import {gql} from '../apollo-client';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SENSOR_FRAGMENT = gql`\n  fragment SensorFragment on Sensor {\n    id\n    name\n    description\n    minIntervalSeconds\n    sensorType\n    nextTick {\n      timestamp\n    }\n    defaultStatus\n    canReset\n    sensorState {\n      id\n      ...InstigationStateFragment\n    }\n    targets {\n      pipelineName\n      solidSelection\n      mode\n    }\n    metadata {\n      assetKeys {\n        path\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nexport type DaemonStatusForWarning = {\n  healthy: boolean | null;\n  required: boolean | null;\n};\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  sensorDaemonStatus?: DaemonStatusForWarning;\n  assetDaemonStatus?: DaemonStatusForWarning;\n};\n\nexport const SensorInfo = ({sensorDaemonStatus, assetDaemonStatus, ...boxProps}: Props) => {\n  const warnForSensor =\n    sensorDaemonStatus && sensorDaemonStatus.healthy === false && sensorDaemonStatus.required;\n  const warnForAssets =\n    assetDaemonStatus && !assetDaemonStatus.healthy === false && assetDaemonStatus.required;\n\n  if (!warnForAssets && !warnForSensor) {\n    return null;\n  }\n\n  const title = () => {\n    if (warnForSensor) {\n      if (warnForAssets) {\n        return 'The sensor and asset daemons are not running';\n      }\n      return 'The sensor daemon is not running';\n    }\n    return 'The asset daemon is not running';\n  };\n\n  return (\n    <Box {...boxProps}>\n      <Alert\n        intent=\"warning\"\n        title={title()}\n        description={\n          <div>\n            See the{' '}\n            <a\n              href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              dagster-daemon documentation\n            </a>{' '}\n            for more information on how to deploy the dagster-daemon process.\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {CursorHistoryControls} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {gql} from '../apollo-client';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {\n  PreviousRunsForSensorQuery,\n  PreviousRunsForSensorQueryVariables,\n} from './types/SensorPreviousRuns.types';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {RunTable} from '../runs/RunTable';\nimport {RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTableRunFragment';\nimport {DagsterTag} from '../runs/RunTag';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns = ({\n  sensor,\n  repoAddress,\n  highlightedIds,\n  tabs,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PreviousRunsForSensorQuery,\n    PreviousRunsForSensorQueryVariables\n  >({\n    query: PREVIOUS_RUNS_FOR_SENSOR_QUERY,\n    variables: {\n      filter: {\n        tags: [\n          {key: DagsterTag.SensorName, value: sensor.name},\n          {key: DagsterTag.RepositoryLabelTag, value: repoAddressAsTag(repoAddress)},\n        ],\n      },\n    },\n    nextCursorForResult: (data) => {\n      if (data.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return data.pipelineRunsOrError.results[RUNS_LIMIT - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (data?.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    pageSize: RUNS_LIMIT,\n  });\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, !paginationProps.hasPrevCursor ? 10000 : 60 * 60 * 1000);\n\n  let data = queryResult.data;\n\n  if (!data || data?.pipelineRunsOrError.__typename !== 'Runs') {\n    // Use previous data to stop the screen from flashing while we wait for the next data to load\n    data = queryResult.previousData;\n  }\n  if (!data || data?.pipelineRunsOrError.__typename !== 'Runs') {\n    return null;\n  }\n\n  const runs = data.pipelineRunsOrError.results;\n  return (\n    <>\n      <RunTable\n        actionBarComponents={tabs}\n        runs={runs}\n        highlightedIds={highlightedIds}\n        hideCreatedBy={true}\n      />\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </>\n  );\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: RunsFilter, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit, cursor: $cursor) {\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {Box, ButtonGroup, Colors, NonIdealState, Page, Spinner} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n  SensorRootQuery,\n  SensorRootQueryVariables,\n} from './types/SensorRoot.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useMergedRefresh, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {AUTOMATION_ASSET_SELECTION_FRAGMENT} from '../automation/AutomationAssetSelectionFragment';\nimport {InstigationTickStatus, SensorType} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TickHistoryTimeline, TicksTable} from '../instigation/TickHistory';\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const variables = useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {};\n  }, [statuses, timeRange]);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const selectionQueryResult = useQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState1 = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const refreshState2 = useQueryRefreshAtInterval(selectionQueryResult, FIFTEEN_SECONDS);\n  const refreshState = useMergedRefresh(refreshState1, refreshState2);\n\n  const {data, loading} = queryResult;\n\n  const tabs = (\n    <ButtonGroup\n      activeItems={new Set([selectedTab])}\n      buttons={[\n        {id: 'evaluations', label: 'Evaluations'},\n        {id: 'runs', label: 'Runs'},\n      ]}\n      onClick={(id: 'evaluations' | 'runs') => {\n        setSelectedTab(id);\n      }}\n    />\n  );\n\n  if (!data && loading) {\n    return (\n      <Box\n        margin={{top: 32}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'center', gap: 16}}\n      >\n        <Spinner purpose=\"body-text\" />\n        <div style={{color: Colors.textLight()}}>Loading sensor…</div>\n      </Box>\n    );\n  }\n\n  if (!data || data.sensorOrError.__typename === 'SensorNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title={`Could not find sensor \\`${sensorName}\\` in definitions for \\`${repoAddress.name}\\``}\n        />\n      </Box>\n    );\n  }\n\n  const {sensorOrError} = data;\n  if (sensorOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={sensorOrError} />;\n  }\n\n  if (sensorOrError.__typename === 'UnauthorizedError') {\n    return <Redirect to=\"/overview/sensors\" />;\n  }\n\n  const {instance} = data;\n  const assetSelection =\n    selectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n      ? selectionQueryResult.data.sensorOrError.assetSelection\n      : null;\n\n  const isAutomationSensor =\n    sensorOrError.sensorType === SensorType.AUTO_MATERIALIZE ||\n    sensorOrError.sensorType === SensorType.AUTOMATION;\n\n  const sensorDaemonStatus = instance.daemonHealth.sensorDaemonStatus;\n\n  const tickResultType: TickResultType = isAutomationSensor ? 'materializations' : 'runs';\n\n  return (\n    <Page>\n      <SensorDetails\n        repoAddress={repoAddress}\n        sensor={sensorOrError}\n        daemonHealth={sensorDaemonStatus.healthy}\n        refreshState={refreshState}\n        assetSelection={assetSelection || null}\n      />\n      <SensorInfo\n        sensorDaemonStatus={sensorDaemonStatus}\n        padding={{vertical: 16, horizontal: 24}}\n      />\n      <TickHistoryTimeline\n        tickResultType={tickResultType}\n        repoAddress={repoAddress}\n        name={sensorOrError.name}\n        {...variables}\n      />\n      <Box margin={{top: 32}} border=\"top\">\n        {selectedTab === 'evaluations' ? (\n          <TicksTable\n            tabs={tabs}\n            tickResultType={tickResultType}\n            repoAddress={repoAddress}\n            name={sensorOrError.name}\n            setParentStatuses={setStatuses}\n            setTimerange={setTimerange}\n          />\n        ) : (\n          <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n        )}\n      </Box>\n    </Page>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      daemonHealth {\n        id\n        sensorDaemonStatus: daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n          required\n        }\n        ampDaemonStatus: daemonStatus(daemonType: \"ASSET\") {\n          id\n          healthy\n          required\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SENSOR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nexport const SENSOR_ASSET_SELECTIONS_QUERY = gql`\n  query SensorAssetSelectionQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        assetSelection {\n          ...AutomationAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${AUTOMATION_ASSET_SELECTION_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Button, Colors, Icon, Table, Tooltip} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {RunConfigDialog} from '../runs/RunConfigDialog';\nimport {RunRequestFragment} from './types/RunRequestFragment.types';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useCopyToClipboard} from '../app/browser';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {testId} from '../testing/testId';\nimport {useRepository} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\n\ntype Props = {\n  name: string;\n  runRequests: RunRequestFragment[];\n  repoAddress: RepoAddress;\n  isJob: boolean;\n  jobName: string;\n  mode?: string;\n};\n\nexport const RunRequestTable = ({runRequests, isJob, repoAddress, mode, jobName}: Props) => {\n  const repo = useRepository(repoAddress);\n  const [selectedRequest, setSelectedRequest] = useState<RunRequestFragment | null>(null);\n  const [visibleDialog, setVisibleDialog] = useState<'config' | null>(null);\n  const copy = useCopyToClipboard();\n\n  const copyConfig = async () => {\n    copy(selectedRequest?.runConfigYaml || '');\n    await showSharedToaster({\n      intent: 'success',\n      icon: 'copy_to_clipboard_done',\n      message: 'Copied!',\n    });\n  };\n\n  const body = (\n    <tbody data-testid={testId('table-body')}>\n      {runRequests.map((request, index) => {\n        return (\n          <tr key={index} data-testid={testId(request.runKey || '')}>\n            <td style={{verticalAlign: 'middle'}}>\n              <Box flex={{alignItems: 'center', gap: 8}}>\n                <PipelineReference\n                  pipelineName={request.jobName ?? jobName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isJob}\n                  showIcon\n                  size=\"small\"\n                />\n              </Box>\n            </td>\n            <td style={{width: '7.5%', verticalAlign: 'middle', textAlign: 'center'}}>\n              <PreviewButton\n                request={request}\n                onClick={() => {\n                  setSelectedRequest(request);\n                  setVisibleDialog('config');\n                }}\n              />\n            </td>\n          </tr>\n        );\n      })}\n      {selectedRequest && (\n        <RunConfigDialog\n          isOpen={visibleDialog === 'config'}\n          onClose={() => setVisibleDialog(null)}\n          copyConfig={() => copyConfig()}\n          mode={mode || null}\n          runConfigYaml={selectedRequest.runConfigYaml}\n          tags={selectedRequest.tags}\n          isJob={isJob}\n          jobName={jobName}\n          request={selectedRequest}\n          repoAddress={repoAddress}\n        />\n      )}\n    </tbody>\n  );\n  return (\n    <div>\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`, tableLayout: 'fixed'}}>\n        <thead>\n          <tr>\n            <th>Target</th>\n            <th style={{width: '7.5%'}}>Actions</th>\n          </tr>\n        </thead>\n        {body}\n      </Table>\n    </div>\n  );\n};\n\nfunction PreviewButton({request, onClick}: {request: RunRequestFragment; onClick: () => void}) {\n  return (\n    <Tooltip content=\"Preview run config and tags\" placement=\"left-start\">\n      <Button\n        icon={<Icon name=\"data_object\" />}\n        onClick={onClick}\n        data-testid={testId(`preview-${request.runKey || ''}`)}\n      />\n    </Tooltip>\n  );\n}\n","import {gql} from '../apollo-client';\n\nexport const RUN_REQUEST_FRAGMENT = gql`\n  fragment RunRequestFragment on RunRequest {\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n    runKey\n    jobName\n    assetSelection {\n      path\n    }\n  }\n`;\n","import {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  ExternalAnchorButton,\n  Icon,\n  NonIdealState,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\n\nimport {INSTIGATION_EVENT_LOG_FRAGMENT, InstigationEventLogTable} from './InstigationEventLogTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {TickLogEventsQuery, TickLogEventsQueryVariables} from './types/TickLogDialog.types';\nimport {InstigationSelector} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const TickLogDialog = ({\n  tickId,\n  timestamp,\n  instigationSelector,\n  isOpen,\n  onClose,\n}: {\n  tickId: string | null;\n  timestamp?: number;\n  instigationSelector: InstigationSelector;\n  isOpen: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', maxWidth: '1200px', minWidth: '800px'}}\n      title={\n        <span>\n          {timestamp ? (\n            <span>\n              <span>Logs for {instigationSelector.name}: </span>\n              <TimestampDisplay timestamp={timestamp} timeFormat={{showSeconds: true}} />\n            </span>\n          ) : (\n            <span>Logs for {instigationSelector.name}</span>\n          )}\n        </span>\n      }\n    >\n      {tickId ? (\n        <QueryfulTickLogsTable instigationSelector={instigationSelector} tickId={tickId} />\n      ) : null}\n      {/* Use z-index to force the footer to sit above the lines of the logs table */}\n      <Box background={Colors.backgroundDefault()} style={{zIndex: 3, position: 'relative'}}>\n        <DialogFooter topBorder>\n          <Button onClick={onClose}>Done</Button>\n        </DialogFooter>\n      </Box>\n    </Dialog>\n  );\n};\n\ninterface TickLogTableProps {\n  tickId: string;\n  instigationSelector: InstigationSelector;\n}\n\nexport const QueryfulTickLogsTable = ({instigationSelector, tickId}: TickLogTableProps) => {\n  const {data, loading} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(\n    TICK_LOG_EVENTS_QUERY,\n    {\n      variables: {instigationSelector, tickId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  if (loading) {\n    return (\n      <Box style={{height: 500}} flex={{justifyContent: 'center', alignItems: 'center'}}>\n        <SpinnerWithText label=\"Loading logs…\" />\n      </Box>\n    );\n  }\n\n  if (events && events.length) {\n    return (\n      <Box style={{height: 500}} flex={{direction: 'column'}}>\n        <InstigationEventLogTable events={events} />\n      </Box>\n    );\n  }\n\n  const tickStatus =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick.status\n      : undefined;\n  const instigationType =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.instigationType\n      : undefined;\n  const instigationLoggingDocsUrl =\n    instigationType === 'SENSOR'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#logging-in-sensors'\n      : instigationType === 'SCHEDULE'\n        ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules#logging-in-schedules'\n        : undefined;\n\n  return (\n    <Box\n      style={{height: 500}}\n      flex={{justifyContent: 'center', alignItems: 'center'}}\n      padding={{vertical: 48}}\n    >\n      <NonIdealState\n        icon=\"no-results\"\n        title=\"No logs to display\"\n        description={\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>\n              Your evaluation did not emit any logs. To learn how to emit logs in your evaluation,\n              visit the documentation for more information.\n            </div>\n            {tickStatus === 'FAILURE' && (\n              <>\n                <div>\n                  For failed evaluations, logs will only be displayed if your Dagster and Dagster\n                  Cloud agent versions 1.5.14 or higher.\n                </div>\n                <div>Upgrade your Dagster versions to view logs for failed evaluations.</div>\n              </>\n            )}\n          </Box>\n        }\n        action={\n          instigationLoggingDocsUrl && (\n            <ExternalAnchorButton\n              href={instigationLoggingDocsUrl}\n              rightIcon={<Icon name=\"open_in_new\" />}\n            >\n              View documentation\n            </ExternalAnchorButton>\n          )\n        }\n      />\n    </Box>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        tick(tickId: $tickId) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...InstigationEventLog\n            }\n          }\n        }\n      }\n    }\n  }\n  ${INSTIGATION_EVENT_LOG_FRAGMENT}\n`;\n","import {\n  BaseTag,\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Tag,\n  Tooltip,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\n\nexport type TickResultType = 'runs' | 'materializations';\n\ntype PropsForMaterializations = {\n  tick: Pick<HistoryTickFragment, 'status' | 'requestedAssetMaterializationCount' | 'error'>;\n  tickResultType: 'materializations';\n  isStuckStarted?: boolean;\n};\n\ntype PropsForRuns = {\n  tick: Pick<HistoryTickFragment, 'status' | 'skipReason' | 'runIds' | 'runKeys' | 'error'>;\n  tickResultType: 'runs';\n  isStuckStarted?: boolean;\n};\n\nexport const TickStatusTag = ({\n  tick,\n  tickResultType,\n  isStuckStarted,\n}: PropsForMaterializations | PropsForRuns) => {\n  const [showErrors, setShowErrors] = useState(false);\n  const tag = useMemo(() => {\n    const requestedItem = tickResultType === 'materializations' ? 'materialization' : 'run';\n    switch (tick.status) {\n      case InstigationTickStatus.STARTED:\n        return (\n          <Tag intent=\"primary\" icon={isStuckStarted ? undefined : 'spinner'}>\n            {isStuckStarted ? 'In progress' : 'Evaluating'}\n          </Tag>\n        );\n      case InstigationTickStatus.SKIPPED:\n        const tag = (\n          <BaseTag\n            fillColor={Colors.backgroundLighter()}\n            label={\n              tickResultType === 'materializations'\n                ? '0 materializations requested'\n                : '0 runs requested'\n            }\n          />\n        );\n        if ('runKeys' in tick && tick.runKeys.length) {\n          const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {tag}\n            </Tooltip>\n          );\n        }\n        if ('skipReason' in tick && tick.skipReason) {\n          return (\n            <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n              {tag}\n            </Tooltip>\n          );\n        }\n        return tag;\n      case InstigationTickStatus.FAILURE:\n        return (\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n            <Tag intent=\"danger\">Failure</Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  setShowErrors(true);\n                }}\n              >\n                View\n              </ButtonLink>\n            ) : null}\n          </Box>\n        );\n      case InstigationTickStatus.SUCCESS:\n        const count =\n          tickResultType === 'materializations'\n            ? tick.requestedAssetMaterializationCount\n            : tick.runIds.length;\n        const successTag = (\n          <Tag intent=\"success\">\n            {count} {requestedItem}\n            {ifPlural(count, '', 's')} requested\n          </Tag>\n        );\n        if ('runKeys' in tick && tick.runKeys.length > tick.runIds.length) {\n          const message = `${tick.runKeys.length} runs requested, but ${\n            tick.runKeys.length - tick.runIds.length\n          } skipped because the runs already exist for those requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {successTag}\n            </Tooltip>\n          );\n        }\n        return successTag;\n    }\n  }, [isStuckStarted, tick, tickResultType]);\n\n  return (\n    <>\n      {tag}\n      {tick.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n","import * as yaml from 'yaml';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {ExecutionParams, ScheduleSelector, SensorSelector} from '../graphql/types';\nimport {sanitizeConfigYamlString} from '../launchpad/yamlUtils';\nimport {ScheduleDryRunInstigationTick} from '../ticks/EvaluateScheduleDialog';\nimport {SensorDryRunInstigationTick} from '../ticks/SensorDryRunDialog';\n\nconst YAML_SYNTAX_INVALID = `The YAML you provided couldn't be parsed. Please fix the syntax errors and try again.`;\n\n// This helper removes __typename, which prevents tags from being passed back to GraphQL\nconst onlyKeyAndValue = ({key, value}: {key: string; value: string}) => ({key, value});\n\n// adapted from buildExecutionVariables() in LaunchpadSession.tsx\nexport const buildExecutionParamsListSensor = (\n  sensorExecutionData: SensorDryRunInstigationTick,\n  sensorSelector: SensorSelector,\n) => {\n  if (!sensorExecutionData) {\n    return [];\n  }\n\n  const executionParamsList: ExecutionParams[] = [];\n\n  sensorExecutionData?.evaluationResult?.runRequests?.forEach((request) => {\n    const configYamlOrEmpty = sanitizeConfigYamlString(request.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n    const {repositoryLocationName, repositoryName} = sensorSelector;\n\n    const executionParams: ExecutionParams = {\n      runConfigData: configYamlOrEmpty,\n      selector: {\n        jobName: request.jobName, // get jobName from runRequest\n        repositoryLocationName,\n        repositoryName,\n        assetSelection: [],\n        assetCheckSelection: [],\n        solidSelection: undefined,\n      },\n      mode: 'default',\n      executionMetadata: {\n        tags: [...request.tags.map(onlyKeyAndValue)],\n      },\n    };\n    executionParamsList.push(executionParams);\n  });\n  return executionParamsList;\n};\n\n// adapted from buildExecutionVariables() in LaunchpadSession.tsx\nexport const buildExecutionParamsListSchedule = (\n  scheduleExecutionData: ScheduleDryRunInstigationTick,\n  scheduleSelector: ScheduleSelector,\n) => {\n  if (!scheduleExecutionData) {\n    return [];\n  }\n\n  const executionParamsList: ExecutionParams[] = [];\n\n  scheduleExecutionData?.evaluationResult?.runRequests?.forEach((request) => {\n    const configYamlOrEmpty = sanitizeConfigYamlString(request.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n    const {repositoryLocationName, repositoryName} = scheduleSelector;\n\n    const executionParams: ExecutionParams = {\n      runConfigData: configYamlOrEmpty,\n      selector: {\n        jobName: request.jobName, // get jobName from runRequest\n        repositoryLocationName,\n        repositoryName,\n        assetSelection: [],\n        assetCheckSelection: [],\n        solidSelection: undefined,\n      },\n      mode: 'default',\n      executionMetadata: {\n        tags: [...request.tags.map(onlyKeyAndValue)],\n      },\n    };\n    executionParamsList.push(executionParams);\n  });\n  return executionParamsList;\n};\n"],"names":["AUTOMATION_ASSET_SELECTION_FRAGMENT","gql","PYTHON_ERROR_FRAGMENT","DisclosureTriangleButton","isOpen","onToggle","param","jsx_runtime","jsx","UnstyledButton","onClick","e","style","cursor","width","Icon","name","transform","AutomationTargetList","assetSelection","automationType","targets","repoAddress","repo","useRepository","span","visibleTargets","filter","isHiddenAssetGroupJob","target","pipelineName","AssetSelectionTag","length","Box","flex","direction","gap","map","Tag","icon","tooltipText","PipelineReference","pipelineHrefContext","isJob","isThisThingAJob","div","color","Colors","showAssetSelection","setShowAssetSelection","useState","error","assetsOrError","__typename","sortedAssets","useMemo","nodes","slice","sort","a","b","COMMON_COLLATOR","compare","displayNameForAssetKey","key","assetsWithAMP","asset","definition","automationCondition","assetsWithoutAMP","assetSelectionString","isAllAssets","firstAsset","Link","to","assetDetailsPathForKey","jsxs","Fragment","Dialog","title","onClose","maxWidth","minWidth","canOutsideClickClose","canEscapeKeyClose","height","maxHeight","minHeight","SensorType","AUTO_MATERIALIZE","AUTOMATION","Section","titleBorder","assets","DialogFooter","topBorder","Button","intent","ButtonLink","showCustomAlert","body","PythonErrorInfo","setIsOpen","border","padding","right","vertical","Subtitle2","numberFormatter","format","overflowY","VirtualizedItemListForDialog","items","renderItem","VirtualizedSelectedAssetRow","id","itemBorders","horizontal","Caption","alignItems","overflow","MiddleTruncate","text","dayjs","relativeTime","COLOR_MAP","InstigationTickStatus","SUCCESS","FAILURE","STARTED","SKIPPED","HoverColorMap","LiveTickTimeline","ticks","tickResultType","onHoverTick","onSelectTick","exactRange","timeRange","MINUTE","tickGrid","timeAfter","now","setNow","Date","isPaused","setPaused","useEffect","interval","setInterval","clearInterval","maxX","minX","showNowLine","fullRange","viewport","containerProps","useViewport","ticksReversed","tick","endTimestamp","reverse","ticksToDisplay","i","timestamp","startX","viewportWidth","endX","isStuckStartedTick","Math","max","tickGridDelta","timeTickGridDelta","startTickGridX","ceil","numTicks","numLabels","gridTicks","ii","time","push","x","showLabel","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","marginRight","TicksWrapper","GridTick","GridTickLine","GridTickTime","Timestamp","ms","timeFormat","showSeconds","count","runIds","requestedAssetMaterializationCount","Tick","status","onMouseEnter","onMouseLeave","Tooltip","content","TickTooltip","NowIndicator","TimeAxisWrapper","memo","runs","ifPlural","startTime","endTime","elapsedTime","as","unix","styled","withConfig","TickStatusDisplay","Chart","register","zoomPlugin","STATUS_DISPLAY_MAP","TicksTable","tabs","setTimerange","setParentStatuses","tickStatus","setTickStatus","useQueryPersistedState","queryKey","defaults","showDetailsForTick","setShowDetailsForTick","showLogsForTick","setShowLogsForTick","instigationSelector","repoAddressToSelector","statuses","React","queryResult","paginationProps","useCursorPaginatedQuery","nextCursorForResult","data","instigationStateOrError","PAGE_SIZE","getResultArray","variables","query","TICK_HISTORY_QUERY","pageSize","useQueryRefreshAtInterval","FIFTEEN_SECONDS","state","hasPrevCursor","start","end","undefined","Array","from","loading","reset","Spinner","purpose","justifyContent","NonIdealState","instigationType","StatusFilter","onChange","TableWrapper","thead","tr","th","InstigationType","SENSOR","tbody","index","TickRow","onShowDetails","onShowLogs","marginTop","CursorHistoryControls","TickDetailsDialog","tickId","TickLogDialog","label","activeItem","find","Select","popoverProps","position","filterable","itemRenderer","item","props","MenuItem","active","modifiers","handleClick","itemListRenderer","filteredItems","renderedItems","Boolean","Menu","onItemSelect","rightIcon","display","TickHistoryTimeline","onHighlightRunIds","beforeTimestamp","afterTimestamp","selectedTickId","setSelectedTickId","encode","decode","qs","pollingPaused","pausePolling","useQuery","limit","notifyOnNetworkStatusChange","top","Subheading","onTickClick","copyToClipboard","useCopyToClipboard","addedPartitions","deletedPartitions","requests","dynamicPartitionsRequestResults","countPartitionsAddedOrDeleted","DynamicPartitionsRequestType","ADD_PARTITIONS","DELETE_PARTITIONS","isStuckStarted","td","TimestampDisplay","showTimezone","TickStatusTag","TimeElapsed","startUnix","endUnix","fontFamily","FontFamily","monospace","fontSize","CopyButton","showSharedToaster","message","RunStatusLink","run","RUN_STATUS_FRAGMENT","TICK_TAG_FRAGMENT","HISTORY_TICK_FRAGMENT","button","IconWrapper","Table","THREE_DAYS","type","reduce","sum","request","partitionKeys","useLaunchMultipleRunsWithTelemetry","launchMultipleRuns","useMutation","LAUNCH_MULTIPLE_RUNS_MUTATION","logTelemetry","useTelemetryAction","history","useHistory","useCallback","behavior","jobName","executionParamsList","isArray","jobNames","params","selector","includes","metadata","opSelection","result","handleLaunchMultipleResult","TelemetryAction","LAUNCH_MULTIPLE_RUNS","console","showLaunchError","SCHEDULE_ASSET_SELECTIONS_QUERY","SensorMonitoredAssets","assetKeys","AssetLink","path","join","SensorResetButton","sensor","permissions","canStartSensor","canStopSensor","usePermissionsForLocation","location","sensorSelector","sensorName","resetSensor","toggleOnInFlight","RESET_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","hasPermission","tooltipContent","defaultStatus","DEFAULT_DISABLED_REASON","wordBreak","disabled","DynamicPartitionRequests","includeTitle","rows","forEach","partitionsDefName","def","grow","borderRight","SensorDryRunDialog","SensorDryRun","currentCursor","trackEvent","useTrackEvent","sensorDryRun","EVALUATE_SENSOR_MUTATION","setCursorMutation","SET_CURSOR_MUTATION","setCursor","submitting","setSubmitting","launching","setLaunching","setError","sensorExecutionData","setSensorExecutionData","repositoryLocationName","repositoryName","buildExecutionParamsListSensor","submitTest","selectorData","evaluationResult","assertUnreachable","onCommitTickResult","setSensorCursor","Group","spacing","underline","launchMultipleRunsWithTelemetry","canLaunchAll","onLaunchAll","leftButtons","data-testid","testId","rightButtons","runRequests","numRunRequests","didSkip","placement","canShow","dynamicPartitionRequests","dynamicPartitionsRequests","Grid","pre","marginBottom","SkipReasonNonIdealStateWrapper","description","br","skipReason","RunRequestTable","ComputedCursorGrid","TextInput","value","placeholder","href","DialogBody","left","RUN_REQUEST_FRAGMENT","NonIdealStateWrapper","EvaluateTickButtonSensor","sensorType","showTestTickDialog","setShowTestTickDialog","STANDARD","TIME_FORMAT","humanizeSensorInterval","minIntervalSeconds","SensorDetails","daemonHealth","refreshState","sensorState","disabledReasons","loadingPermissions","canUpdateSensorCursor","isCursorEditing","setCursorEditing","latestTick","typeSpecificData","lastCursor","running","InstigationStatus","RUNNING","PageHeader","Heading","flexDirection","tags","RepositoryLink","margin","QueryRefreshCountdown","MetadataTableWIP","nextTick","TargetCell","SensorSwitch","canReset","EditCursorDialog","SENSOR_FRAGMENT","INSTIGATION_STATE_FRAGMENT","SensorInfo","sensorDaemonStatus","assetDaemonStatus","boxProps","warnForSensor","healthy","required","warnForAssets","Alert","rel","SensorPreviousRuns","highlightedIds","PREVIOUS_RUNS_FOR_SENSOR_QUERY","DagsterTag","SensorName","RepositoryLabelTag","repoAddressAsTag","pipelineRunsOrError","results","RUNS_LIMIT","previousData","RunTable","actionBarComponents","hideCreatedBy","paddingBottom","RUN_TABLE_RUN_FRAGMENT","SensorRoot","useTrackPageView","useParams","useDocumentTitle","setStatuses","selectedTab","setSelectedTab","view","raw","SENSOR_ROOT_QUERY","selectionQueryResult","SENSOR_ASSET_SELECTIONS_QUERY","refreshState1","refreshState2","useMergedRefresh","ButtonGroup","activeItems","Set","buttons","sensorOrError","Redirect","instance","isAutomationSensor","Page","INSTANCE_HEALTH_FRAGMENT","mode","selectedRequest","setSelectedRequest","visibleDialog","setVisibleDialog","copy","copyConfig","runConfigYaml","runKey","verticalAlign","showIcon","size","textAlign","PreviewButton","RunConfigDialog","tableLayout","QueryfulTickLogsTable","background","zIndex","TICK_LOG_EVENTS_QUERY","events","logEvents","SpinnerWithText","InstigationEventLogTable","instigationLoggingDocsUrl","action","ExternalAnchorButton","INSTIGATION_EVENT_LOG_FRAGMENT","showErrors","setShowErrors","tag","requestedItem","BaseTag","fillColor","runKeys","targetTagName","successTag","YAML_SYNTAX_INVALID","onlyKeyAndValue","configYamlOrEmpty","sanitizeConfigYamlString","yaml","executionParams","runConfigData","assetCheckSelection","solidSelection","executionMetadata","buildExecutionParamsListSchedule","scheduleExecutionData","scheduleSelector"],"sourceRoot":""}
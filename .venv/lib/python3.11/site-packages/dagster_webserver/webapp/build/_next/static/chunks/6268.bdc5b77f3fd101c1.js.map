{"version":3,"file":"static/chunks/6268.bdc5b77f3fd101c1.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/../ui-core/src/runs/QueuedRunsBanners.tsx","webpack://_N_E/../ui-core/src/runs/TerminateAllRunsButton.tsx","webpack://_N_E/../ui-core/src/hooks/usePortalSlot.tsx","webpack://_N_E/../ui-core/src/runs/RunsRoot.tsx"],"sourcesContent":["import {gql, useQuery} from '../apollo-client';\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const queryResult = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!queryResult.data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  QueueDaemonStatusQuery,\n  QueueDaemonStatusQueryVariables,\n} from './types/QueuedRunsBanners.types';\nimport {InstancePageContext} from '../instance/InstancePageContext';\nimport {useCanSeeConfig} from '../instance/useCanSeeConfig';\n\nexport const QueuedRunsBanners = () => {\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}} style={{minWidth: '100%'}} border=\"bottom\">\n      {canSeeConfig && (\n        <Alert\n          intent=\"info\"\n          title={<Link to=\"/config#run_coordinator\">View queue configuration</Link>}\n        />\n      )}\n      {canSeeConfig && <QueueDaemonAlert />}\n    </Box>\n  );\n};\n\nconst QueueDaemonAlert = () => {\n  const {data} = useQuery<QueueDaemonStatusQuery, QueueDaemonStatusQueryVariables>(\n    QUEUE_DAEMON_STATUS_QUERY,\n  );\n  const {pageTitle} = useContext(InstancePageContext);\n  const status = data?.instance.daemonHealth.daemonStatus;\n  if (status?.required && !status?.healthy) {\n    return (\n      <Alert\n        intent=\"warning\"\n        title=\"The queued run coordinator is not healthy.\"\n        description={\n          <div>\n            View <Link to=\"/health\">{pageTitle}</Link> for details.\n          </div>\n        }\n      />\n    );\n  }\n  return null;\n};\n\nconst QUEUE_DAEMON_STATUS_QUERY = gql`\n  query QueueDaemonStatusQuery {\n    instance {\n      id\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"QUEUED_RUN_COORDINATOR\") {\n          id\n          daemonType\n          healthy\n          required\n        }\n      }\n    }\n  }\n`;\n","import {Button} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport {useState} from 'react';\n\nimport {queuedStatuses} from './RunStatuses';\nimport {TerminationDialog} from './TerminationDialog';\nimport {gql, useApolloClient} from '../apollo-client';\nimport {\n  TerminateRunIdsQuery,\n  TerminateRunIdsQueryVariables,\n} from './types/TerminateAllRunsButton.types';\nimport {RunsFilter} from '../graphql/types';\n\nexport const TerminateAllRunsButton = ({\n  refetch,\n  filter,\n  disabled,\n}: {\n  refetch: () => void;\n  filter: RunsFilter;\n  disabled: boolean;\n}) => {\n  const [terminating, setTerminating] = useState<{[runId: string]: boolean} | null>(null);\n  const client = useApolloClient();\n\n  const onTerminateAll = async () => {\n    const queuedRunIds = await client.query<TerminateRunIdsQuery, TerminateRunIdsQueryVariables>({\n      query: TERMINATE_RUN_IDS_QUERY,\n      variables: {filter},\n    });\n    setTerminating(\n      queuedRunIds.data.pipelineRunsOrError.__typename === 'Runs'\n        ? Object.fromEntries(\n            queuedRunIds.data.pipelineRunsOrError.results.map((run) => [run.id, run.canTerminate]),\n          )\n        : {},\n    );\n  };\n  return (\n    <>\n      <TerminationDialog\n        isOpen={terminating !== null}\n        selectedRuns={terminating || {}}\n        selectedRunsAllQueued={isEqual(filter, {statuses: Array.from(queuedStatuses)})}\n        onClose={() => setTerminating(null)}\n        onComplete={() => refetch()}\n      />\n      <Button intent=\"danger\" outlined disabled={disabled} onClick={onTerminateAll}>\n        Terminate all…\n      </Button>\n    </>\n  );\n};\n\nconst TERMINATE_RUN_IDS_QUERY = gql`\n  query TerminateRunIdsQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          status\n          canTerminate\n        }\n      }\n    }\n  }\n`;\n","import * as React from 'react';\nimport {createPortal} from 'react-dom';\n\n/**\n * Allows you to move a component around in the tree without it losing its state.\n */\nexport function usePortalSlot(reactNode: React.ReactNode) {\n  const [targetEl, setTargetEl] = React.useState<HTMLDivElement | null>(null);\n\n  React.useLayoutEffect(() => {\n    setTargetEl((e) => (e === null ? document.createElement('div') : e));\n  }, []);\n\n  return [\n    targetEl ? createPortal(reactNode, targetEl) : null,\n    targetEl ? <DOMNodeHost node={targetEl} /> : null,\n  ];\n}\n\nfunction DOMNodeHost({node}: {node: HTMLElement}) {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  React.useLayoutEffect(() => {\n    const ownDiv = ref.current;\n    if (node.parentNode === ownDiv) {\n      return;\n    }\n    if (node.parentNode !== null && node.parentNode !== ownDiv) {\n      throw Error('Cannot render the same node twice');\n    }\n    ownDiv?.appendChild(node);\n    return () => {\n      ownDiv?.removeChild(node);\n    };\n  }, [node]);\n  return <div ref={ref} />;\n}\n","import {\n  Box,\n  ButtonLink,\n  CursorHistoryControls,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  tokenToString,\n} from '@dagster-io/ui-components';\nimport partition from 'lodash/partition';\nimport {useCallback, useMemo} from 'react';\n\nimport {QueuedRunsBanners} from './QueuedRunsBanners';\nimport {useRunListTabs, useSelectedRunsTab} from './RunListTabs';\nimport {inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {RunTable} from './RunTable';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {\n  RunFilterToken,\n  RunFilterTokenType,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  useRunsFilterInput,\n} from './RunsFilterInput';\nimport {TerminateAllRunsButton} from './TerminateAllRunsButton';\nimport {usePaginatedRunsTableRuns} from './usePaginatedRunsTableRuns';\nimport {ApolloError} from '../apollo-client';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useMergedRefresh,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {usePortalSlot} from '../hooks/usePortalSlot';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\n\nconst PAGE_SIZE = 25;\n\nexport const RunsRoot = () => {\n  useTrackPageView();\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters();\n  const filter = runsFilterForSearchTokens(filterTokens);\n  const {queryResult, paginationProps} = usePaginatedRunsTableRuns(filter, PAGE_SIZE);\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const currentTab = useSelectedRunsTab(filterTokens);\n  const staticStatusTags = currentTab !== 'all';\n  const [statusTokens, nonStatusTokens] = partition(\n    filterTokens,\n    (token) => token.token === 'status',\n  );\n\n  const setFilterTokensWithStatus = useCallback(\n    (tokens: RunFilterToken[]) => {\n      if (staticStatusTags) {\n        setFilterTokens([...statusTokens, ...tokens]);\n      } else {\n        setFilterTokens(tokens);\n      }\n    },\n    [setFilterTokens, staticStatusTags, statusTokens],\n  );\n\n  const onAddTag = useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!nonStatusTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokensWithStatus([...nonStatusTokens, token]);\n      }\n    },\n    [nonStatusTokens, setFilterTokensWithStatus],\n  );\n\n  const enabledFilters = useMemo(() => {\n    const filters: RunFilterTokenType[] = [\n      'tag',\n      'snapshotId',\n      'id',\n      'job',\n      'pipeline',\n      'partition',\n      'backfill',\n    ];\n\n    if (!staticStatusTags) {\n      filters.push('status');\n    }\n\n    return filters;\n  }, [staticStatusTags]);\n\n  const mutableTokens = useMemo(() => {\n    if (staticStatusTags) {\n      return filterTokens.filter((token) => token.token !== 'status');\n    }\n    return filterTokens;\n  }, [filterTokens, staticStatusTags]);\n\n  const {tabs, queryResult: runQueryResult} = useRunListTabs(filter);\n  const countRefreshState = useQueryRefreshAtInterval(runQueryResult, FIFTEEN_SECONDS);\n  const combinedRefreshState = useMergedRefresh(countRefreshState, refreshState);\n\n  const {button, activeFiltersJsx} = useRunsFilterInput({\n    tokens: mutableTokens,\n    onChange: setFilterTokensWithStatus,\n    enabledFilters,\n  });\n\n  const [filtersPortal, filtersSlot] = usePortalSlot(button);\n\n  function actionBar() {\n    return (\n      <Box style={{width: '100%', marginRight: 8}} flex={{justifyContent: 'space-between'}}>\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          {tabs}\n          {filtersSlot}\n        </Box>\n        {currentTab === 'queued' ? (\n          <TerminateAllRunsButton\n            refetch={combinedRefreshState.refetch}\n            filter={{...filter, statuses: Array.from(queuedStatuses)}}\n            disabled={\n              runQueryResult.data?.queuedCount.__typename === 'Runs'\n                ? runQueryResult.data?.queuedCount.count === 0\n                : true\n            }\n          />\n        ) : currentTab === 'in-progress' ? (\n          <TerminateAllRunsButton\n            refetch={combinedRefreshState.refetch}\n            filter={{...filter, statuses: Array.from(inProgressStatuses)}}\n            disabled={\n              runQueryResult.data?.inProgressCount.__typename === 'Runs'\n                ? runQueryResult.data?.inProgressCount.count === 0\n                : true\n            }\n          />\n        ) : undefined}\n      </Box>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Runs</Heading>}\n        right={<QueryRefreshCountdown refreshState={combinedRefreshState} />}\n      />\n      {filtersPortal}\n      <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n        <Loading\n          queryResult={queryResult}\n          allowStaleData\n          renderError={(error: ApolloError) => {\n            // In this case, a 400 is most likely due to invalid run filters, which are a GraphQL\n            // validation error but surfaced as a 400.\n            const badRequest = !!(\n              error?.networkError &&\n              'statusCode' in error.networkError &&\n              error.networkError.statusCode === 400\n            );\n            return (\n              <Box flex={{direction: 'column', gap: 32}} padding={{vertical: 8, horizontal: 24}}>\n                {actionBar()}\n                <NonIdealState\n                  icon=\"warning\"\n                  title={badRequest ? 'Invalid run filters' : 'Unexpected error'}\n                  description={\n                    badRequest\n                      ? 'The specified run filters are not valid. Please check the filters and try again.'\n                      : 'An unexpected error occurred. Check the console for details.'\n                  }\n                />\n              </Box>\n            );\n          }}\n        >\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n\n            return (\n              <>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={pipelineRunsOrError.results}\n                    onAddTag={onAddTag}\n                    filter={filter}\n                    actionBarComponents={actionBar()}\n                    belowActionBarComponents={\n                      currentTab === 'queued' || activeFiltersJsx.length ? (\n                        <>\n                          {currentTab === 'queued' && <QueuedRunsBanners />}\n                          {activeFiltersJsx.length > 0 && (\n                            <>\n                              {activeFiltersJsx}\n                              <ButtonLink onClick={() => setFilterTokensWithStatus([])}>\n                                Clear all\n                              </ButtonLink>\n                            </>\n                          )}\n                        </>\n                      ) : null\n                    }\n                  />\n                </StickyTableContainer>\n                {pipelineRunsOrError.results.length > 0 ? (\n                  <div style={{marginTop: '16px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </RunsQueryRefetchContext.Provider>\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunsRoot;\n"],"names":["useCanSeeConfig","queryResult","useQuery","INSTANCE_CONFIG_HAS_INFO","data","instance","hasInfo","gql","QueuedRunsBanners","canSeeConfig","jsx_runtime","jsxs","Box","flex","direction","gap","style","minWidth","border","jsx","Alert","intent","title","Link","to","QueueDaemonAlert","QUEUE_DAEMON_STATUS_QUERY","pageTitle","useContext","InstancePageContext","status","daemonHealth","daemonStatus","required","healthy","description","div","TerminateAllRunsButton","refetch","filter","disabled","param","terminating","setTerminating","useState","client","useApolloClient","onTerminateAll","queuedRunIds","query","TERMINATE_RUN_IDS_QUERY","variables","pipelineRunsOrError","__typename","Object","fromEntries","results","map","run","id","canTerminate","Fragment","TerminationDialog","isOpen","selectedRuns","selectedRunsAllQueued","isEqual","statuses","Array","from","queuedStatuses","onClose","onComplete","Button","outlined","onClick","DOMNodeHost","node","ref","React","ownDiv","current","parentNode","Error","appendChild","removeChild","RunsRoot","useTrackPageView","filterTokens","setFilterTokens","useQueryPersistedRunFilters","runsFilterForSearchTokens","paginationProps","usePaginatedRunsTableRuns","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","currentTab","useSelectedRunsTab","staticStatusTags","statusTokens","nonStatusTokens","partition","token","setFilterTokensWithStatus","useCallback","tokens","onAddTag","tokenAsString","tokenToString","some","enabledFilters","useMemo","filters","push","mutableTokens","tabs","runQueryResult","useRunListTabs","countRefreshState","combinedRefreshState","useMergedRefresh","button","activeFiltersJsx","useRunsFilterInput","onChange","filtersPortal","filtersSlot","usePortalSlot","reactNode","targetEl","setTargetEl","e","document","createElement","createPortal","actionBar","width","marginRight","justifyContent","alignItems","queuedCount","count","inProgressStatuses","inProgressCount","undefined","Page","PageHeader","Heading","right","QueryRefreshCountdown","RunsQueryRefetchContext","Provider","value","Loading","allowStaleData","renderError","badRequest","error","networkError","statusCode","padding","vertical","horizontal","NonIdealState","icon","message","StickyTableContainer","$top","RunTable","runs","actionBarComponents","belowActionBarComponents","length","ButtonLink","marginTop","CursorHistoryControls","runs_RunsRoot"],"sourceRoot":""}
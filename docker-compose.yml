version: '3.8'

services:
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: jupyter
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    ports:
      - "8888:8888"
    volumes:
      - jupyter_notebooks:/home/jovyan/work
      - jupyter_config:/home/jovyan/.jupyter
    environment:
      - JUPYTER_TOKEN
      - JUPYTER_ENABLE_LAB=yes
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8888"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "awslogs"
      options:
        awslogs-region: "${AWS_DEFAULT_REGION:-us-east-1}"
        awslogs-group: "/docker/jupyter"
        awslogs-stream: "jupyter"

  dagster:
    image: dagster/dagster:latest
    container_name: dagster
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    ports:
      - "3000:3000"
    volumes:
      - dagster_data:/opt/dagster/dagster_home
    environment:
      - DAGSTER_HOME
    depends_on:
      jupyter:
        condition: service_healthy
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "awslogs"
      options:
        awslogs-region: "${AWS_DEFAULT_REGION:-us-east-1}"
        awslogs-group: "/docker/dagster"
        awslogs-stream: "dagster"

  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    ports:
      - "8889:8889"
    volumes:
      - searxng_config:/etc/searxng
    environment:
      - SEARXNG_BASE_URL
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8889"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "awslogs"
      options:
        awslogs-region: "${AWS_DEFAULT_REGION:-us-east-1}"
        awslogs-group: "/docker/searxng"
        awslogs-stream: "searxng"

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    volumes:
      - ./cloudflared:/etc/cloudflared:ro
    environment:
      - TUNNEL_TOKEN
    command: tunnel --no-autoupdate run --config /etc/cloudflared/config.yml
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "cloudflared", "tunnel", "info"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  reverse_proxy:
    image: nginx:latest
    container_name: reverse_proxy
    restart: unless-stopped
    user: "nginx"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
    depends_on:
      jupyter:
        condition: service_healthy
      dagster:
        condition: service_healthy
      searxng:
        condition: service_healthy
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "awslogs"
      options:
        awslogs-region: "${AWS_DEFAULT_REGION:-us-east-1}"
        awslogs-group: "/docker/nginx"
        awslogs-stream: "nginx"

  s3_client:
    image: amazon/aws-cli
    container_name: s3_client
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_DEFAULT_REGION
    volumes:
      - ./data:/data:ro
    command: sh -c "while true; do aws s3 sync /data s3://your-bucket-name/; sleep 3600; done"
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "aws", "s3", "ls"]
      interval: 60s
      timeout: 10s
      retries: 3

  backup:
    image: ubuntu:latest
    container_name: backup
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    volumes:
      - jupyter_notebooks:/backup/jupyter:ro
      - dagster_data:/backup/dagster:ro
      - searxng_config:/backup/searxng:ro
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_DEFAULT_REGION
    command: >
      sh -c '
        apt-get update && 
        apt-get install -y awscli && 
        while true; do 
          tar -czvf /tmp/backup.tar.gz /backup && 
          aws s3 cp /tmp/backup.tar.gz s3://your-bucket-name/backup-$(date +%Y%m%d-%H%M%S).tar.gz && 
          rm /tmp/backup.tar.gz;
          sleep 86400;
        done'
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "aws", "s3", "ls"]
      interval: 60s
      timeout: 10s
      retries: 3

networks:
  my_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  jupyter_notebooks:
    driver: local
  jupyter_config:
    driver: local
  dagster_data:
    driver: local
  searxng_config:
    driver: local
  data:
    driver: local

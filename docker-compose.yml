version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --certificatesresolvers.letsencrypt.acme.email=sloane@ec1c.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
      - ./nginx/.htpasswd:/etc/traefik/.htpasswd
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.ec1c.com`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.usersfile=/etc/traefik/.htpasswd"
    networks:
      - traefik_network

  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: jupyter
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          memory: ${JUPYTER_MEMORY_LIMIT:-0}  # 0 means no limit
          cpus: ${JUPYTER_CPU_LIMIT:-0}      # 0 means all cores
    ulimits:
      memlock: -1    # Unlimited locked memory
      nofile:        # Maximum number of open files
        soft: 65535
        hard: 65535
    ports:
      - "8888:8888"
    volumes:
      - jupyter_notebooks:/home/jovyan/work
      - jupyter_config:/home/jovyan/.jupyter
    environment:
      - JUPYTER_TOKEN
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_ALLOW_ROOT=yes
      - GRANT_SUDO=yes
    command: >
      start-notebook.sh
      --NotebookApp.allow_root=yes
      --NotebookApp.ip='0.0.0.0'
      --NotebookApp.notebook_dir='/home/jovyan/work'
      --NotebookApp.token='${JUPYTER_TOKEN}'
    networks:
      - my_network
    healthcheck:
      test: |
        CMD bash -c 'wget --no-verbose --tries=1 --spider http://localhost:8888/api/status && \
        ps aux | grep -q "[j]upyter-lab"'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  dagster:
    image: dagster/dagster:latest
    container_name: dagster
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          memory: ${DAGSTER_MEMORY_LIMIT:-0}  # 0 means no limit
          cpus: ${DAGSTER_CPU_LIMIT:-0}      # 0 means all cores
    ulimits:
      memlock: -1    # Unlimited locked memory
      nofile:        # Maximum number of open files
        soft: 65535
        hard: 65535
    ports:
      - "3000:3000"
    volumes:
      - dagster_data:/opt/dagster/dagster_home
    environment:
      - DAGSTER_HOME=/opt/dagster/dagster_home
      - DAGSTER_MAX_WORKERS=${DAGSTER_MAX_WORKERS:--1}
      - DAGSTER_COMPUTE_LOG_LEVEL=${DAGSTER_COMPUTE_LOG_LEVEL:-DEBUG}
    depends_on:
      jupyter:
        condition: service_healthy
    networks:
      - my_network
    healthcheck:
      test: |
        CMD bash -c 'wget --no-verbose --tries=1 --spider http://localhost:3000/health && \
        ps aux | grep -q "[d]agster"'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "awslogs"
      options:
        awslogs-region: "${AWS_DEFAULT_REGION:-us-east-1}"
        awslogs-group: "/docker/dagster"
        awslogs-stream: "dagster"

  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    ports:
      - "8889:8889"
    volumes:
      - searxng_config:/etc/searxng
    environment:
      - SEARXNG_BASE_URL=https://app.ec1c.com/searxng
    networks:
      - my_network
    healthcheck:
      test: |
        CMD bash -c 'wget --no-verbose --tries=1 --spider http://localhost:8889/status && \
        ps aux | grep -q "[u]wsgi"'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "awslogs"
      options:
        awslogs-region: "${AWS_DEFAULT_REGION:-us-east-1}"
        awslogs-group: "/docker/searxng"
        awslogs-stream: "searxng"

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}
    depends_on:
      - traefik
    networks:
      - traefik_network

  whoami:
    image: traefik/whoami:v1.10
    container_name: whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.ec1c.com`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.routers.whoami.tls.certresolver=letsencrypt"
      - "traefik.http.routers.whoami.middlewares=auth"
    depends_on:
      - traefik
    networks:
      - traefik_network

  vaultwarden:
    image: vaultwarden/server:1.32.5-alpine
    container_name: vaultwarden
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vw.rule=Host(`vw.ec1c.com`)"
      - "traefik.http.routers.vw.entrypoints=websecure"
      - "traefik.http.routers.vw.tls=true"
      - "traefik.http.routers.vw.tls.certresolver=letsencrypt"
      - "traefik.http.routers.vw.middlewares=auth"
    volumes:
      - ./vw-data/:/data/
    depends_on:
      - traefik
    networks:
      - traefik_network

  s3_client:
    image: amazon/aws-cli
    container_name: s3_client
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_DEFAULT_REGION
    volumes:
      - ./data:/data:ro
    command: sh -c "while true; do aws s3 sync /data s3://${S3_DATA_BUCKET:-ethicic-app-data}/; sleep 3600; done"
    networks:
      - my_network
    healthcheck:
      test: |
        CMD bash -c 'aws s3 ls && \
        aws sts get-caller-identity'
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  backup:
    image: ubuntu:latest
    container_name: backup
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    volumes:
      - jupyter_notebooks:/backup/jupyter:ro
      - dagster_data:/backup/dagster:ro
      - searxng_config:/backup/searxng:ro
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_DEFAULT_REGION
    command: >
      sh -c '
        apt-get update && 
        apt-get install -y awscli && 
        while true; do 
          tar -czvf /tmp/backup.tar.gz /backup && 
          aws s3 cp /tmp/backup.tar.gz s3://${S3_BACKUP_BUCKET:-ethicic-backups}/backup-$(date +%Y%m%d-%H%M%S).tar.gz && 
          rm /tmp/backup.tar.gz;
          sleep 86400;
        done'
    networks:
      - my_network
    healthcheck:
      test: |
        CMD bash -c 'aws s3 ls && \
        aws sts get-caller-identity && \
        test -w /tmp'
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  traefik_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  vw-data:
    driver: local
  letsencrypt:
    driver: local

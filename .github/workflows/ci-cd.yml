name: Infrastructure CI/CD

permissions:
  contents: read
  actions: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  verify-secrets:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Verify required secrets
      run: |
        echo "Verifying required secrets..."
        missing_secrets=0
        
        # Check Hetzner S3 credentials
        if [ -z "${{ secrets.HETZNER_S3_ACCESS_KEY }}" ]; then
          echo "Error: Required secret 'HETZNER_S3_ACCESS_KEY' is not set"
          missing_secrets=1
        fi
        if [ -z "${{ secrets.HETZNER_S3_SECRET_KEY }}" ]; then
          echo "Error: Required secret 'HETZNER_S3_SECRET_KEY' is not set"
          missing_secrets=1
        fi
        if [ -z "${{ secrets.AWS_ENDPOINT_URL }}" ]; then
          echo "Error: Required secret 'AWS_ENDPOINT_URL' is not set"
          missing_secrets=1
        fi
        if [ -z "${{ secrets.S3_BACKUP_BUCKET }}" ]; then
          echo "Error: Required secret 'S3_BACKUP_BUCKET' is not set"
          missing_secrets=1
        fi
        if [ -z "${{ secrets.S3_DATA_BUCKET }}" ]; then
          echo "Error: Required secret 'S3_DATA_BUCKET' is not set"
          missing_secrets=1
        fi
        
        # Check SSH credentials
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "Error: Required secret 'SSH_PRIVATE_KEY' is not set"
          missing_secrets=1
        fi
        if [ -z "${{ secrets.SSH_KNOWN_HOSTS }}" ]; then
          echo "Error: Required secret 'SSH_KNOWN_HOSTS' is not set"
          missing_secrets=1
        fi
        if [ -z "${{ secrets.SSH_USER }}" ]; then
          echo "Error: Required secret 'SSH_USER' is not set"
          missing_secrets=1
        fi
        if [ -z "${{ secrets.SSH_HOST }}" ]; then
          echo "Error: Required secret 'SSH_HOST' is not set"
          missing_secrets=1
        fi
        
        if [ $missing_secrets -ne 0 ]; then
          echo "Error: One or more required secrets are missing"
          exit 1
        fi
        
        echo "All required secrets are present"
        
  validate-configs:
    needs: verify-secrets
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
    
    - name: Create Docker networks and volumes
      run: |
        echo "Creating required Docker networks..."
        docker network ls | grep -q proxy || docker network create proxy
        docker network ls | grep -q my_network || docker network create my_network
        docker network ls
        
        echo "Creating required Docker volumes..."
        docker volume create searxng_config || true
        docker volume create jupyter_data || true
        docker volume create dagster_data || true
        docker volume ls
    
    - name: Validate Docker Compose files
      env:
        HETZNER_S3_ACCESS_KEY: ${{ secrets.HETZNER_S3_ACCESS_KEY }}
        HETZNER_S3_SECRET_KEY: ${{ secrets.HETZNER_S3_SECRET_KEY }}
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        S3_DATA_BUCKET: ${{ secrets.S3_DATA_BUCKET }}
        CF_TUNNEL_TOKEN: ${{ secrets.CF_TUNNEL_TOKEN }}
        JUPYTER_TOKEN: order-of-ther-first-state
        JUPYTER_ENABLE_LAB: "yes"
        JUPYTER_ALLOW_ROOT: "yes"
        DAGSTER_HOME: /opt/dagster/dagster_home
        LOG_LEVEL: info
        COMPOSE_DOCKER_CLI_BUILD: 1
        DOCKER_BUILDKIT: 1
      run: |
        # Create test environment
        mkdir -p nginx/certs cloudflared
        
        # Verify networks and volumes
        echo "Verifying Docker networks..."
        docker network ls
        echo "Verifying Docker volumes..."
        docker volume ls
        
        # Create .env with configuration
        cat > .env << EOL
        JUPYTER_TOKEN=${JUPYTER_TOKEN}
        JUPYTER_ENABLE_LAB=${JUPYTER_ENABLE_LAB}
        JUPYTER_ALLOW_ROOT=${JUPYTER_ALLOW_ROOT}
        DAGSTER_HOME=${DAGSTER_HOME}
        LOG_LEVEL=${LOG_LEVEL}
        AWS_ACCESS_KEY_ID=${HETZNER_S3_ACCESS_KEY}
        AWS_SECRET_ACCESS_KEY=${HETZNER_S3_SECRET_KEY}
        AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
        S3_BACKUP_BUCKET=${S3_BACKUP_BUCKET}
        S3_DATA_BUCKET=${S3_DATA_BUCKET}
        CF_TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}
        EOL
        
        # Create network and volume configuration
        cat > docker-compose.override.yml << EOL
        networks:
          my_network:
            external: true
          proxy:
            external: true
        volumes:
          searxng_config:
            external: true
          jupyter_data:
            external: true
          dagster_data:
            external: true
        EOL
        
        echo "Validating docker-compose.yml..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml config || (echo "Error: docker-compose.yml validation failed"; exit 1)
        
        echo "Validating docker-compose.fail2ban.yml..."
        docker compose -f docker-compose.fail2ban.yml -f docker-compose.override.yml config || (echo "Error: docker-compose.fail2ban.yml validation failed"; exit 1)
        
    - name: Validate Traefik config
      run: |
        echo "Validating Traefik configuration..."
        docker run -v ${{ github.workspace }}/traefik:/etc/traefik:ro traefik:v2.10 traefik validate --check || (echo "Error: Traefik configuration validation failed"; exit 1)

  test-containers:
    runs-on: ubuntu-latest
    needs: validate-configs
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      
    - name: Create Docker networks and volumes
      run: |
        echo "Creating required Docker networks..."
        docker network ls | grep -q proxy || docker network create proxy
        docker network ls | grep -q my_network || docker network create my_network
        docker network ls
      
    - name: Create test environment
      env:
        JUPYTER_TOKEN: order-of-ther-first-state
        JUPYTER_ENABLE_LAB: "yes"
        JUPYTER_ALLOW_ROOT: "yes"
        DAGSTER_HOME: /opt/dagster/dagster_home
        LOG_LEVEL: info
        AWS_ACCESS_KEY_ID: ${{ secrets.HETZNER_S3_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.HETZNER_S3_SECRET_KEY }}
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        S3_DATA_BUCKET: ${{ secrets.S3_DATA_BUCKET }}
        CF_TUNNEL_TOKEN: ${{ secrets.CF_TUNNEL_TOKEN }}
        COMPOSE_DOCKER_CLI_BUILD: 1
        DOCKER_BUILDKIT: 1
      run: |
        echo "Creating test environment..."
        mkdir -p nginx/certs cloudflared
        
        # Verify networks and volumes
        echo "Verifying Docker networks..."
        docker network ls
        echo "Verifying Docker volumes..."
        docker volume ls
        
        # Create network and volume configuration
        cat > docker-compose.override.yml << EOL
        networks:
          my_network:
            external: true
          proxy:
            external: true
        volumes:
          searxng_config:
            external: true
          jupyter_data:
            external: true
          dagster_data:
            external: true
        EOL
        
        # Create .env with configuration
        cat > .env << EOL
        JUPYTER_TOKEN=${JUPYTER_TOKEN}
        JUPYTER_ENABLE_LAB=${JUPYTER_ENABLE_LAB}
        JUPYTER_ALLOW_ROOT=${JUPYTER_ALLOW_ROOT}
        DAGSTER_HOME=${DAGSTER_HOME}
        LOG_LEVEL=${LOG_LEVEL}
        AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
        S3_BACKUP_BUCKET=${S3_BACKUP_BUCKET}
        S3_DATA_BUCKET=${S3_DATA_BUCKET}
        EOL
        
    - name: Build and test containers
      env:
        JUPYTER_TOKEN: order-of-ther-first-state
        JUPYTER_ENABLE_LAB: "yes"
        JUPYTER_ALLOW_ROOT: "yes"
        DAGSTER_HOME: /opt/dagster/dagster_home
        LOG_LEVEL: info
        AWS_ACCESS_KEY_ID: ${{ secrets.HETZNER_S3_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.HETZNER_S3_SECRET_KEY }}
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        S3_DATA_BUCKET: ${{ secrets.S3_DATA_BUCKET }}
        COMPOSE_DOCKER_CLI_BUILD: 1
        DOCKER_BUILDKIT: 1
      run: |
        echo "Starting containers..."
        docker compose -f docker-compose.yml -f docker-compose.override.yml up -d || (echo "Error: Failed to start containers"; exit 1)
        
        echo "Checking container status..."
        docker compose ps || (echo "Error: Container status check failed"; exit 1)
        
        echo "Waiting for services to initialize..."
        sleep 30
        
    - name: Test service health
      env:
        JUPYTER_TOKEN: order-of-ther-first-state
      run: |
        echo "Testing Jupyter health..."
        curl -f http://localhost:8888/api/status || (echo "Error: Jupyter health check failed"; exit 1)
        
        echo "Testing Dagster health..."
        curl -f http://localhost:3000/health || (echo "Error: Dagster health check failed"; exit 1)
        
        echo "Testing SearxNG health..."
        curl -f http://localhost:8889/status || (echo "Error: SearxNG health check failed"; exit 1)
        
    - name: Test fail2ban integration
      env:
        JUPYTER_TOKEN: order-of-ther-first-state
        JUPYTER_ENABLE_LAB: "yes"
        JUPYTER_ALLOW_ROOT: "yes"
        DAGSTER_HOME: /opt/dagster/dagster_home
        LOG_LEVEL: info
        AWS_ACCESS_KEY_ID: ${{ secrets.HETZNER_S3_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.HETZNER_S3_SECRET_KEY }}
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        S3_DATA_BUCKET: ${{ secrets.S3_DATA_BUCKET }}
      run: |
        echo "Starting fail2ban..."
        docker compose -f docker-compose.fail2ban.yml up -d || (echo "Error: Failed to start fail2ban"; exit 1)
        
        echo "Waiting for fail2ban to initialize..."
        sleep 10
        
        echo "Checking fail2ban status..."
        docker compose exec -T fail2ban fail2ban-client status || (echo "Error: fail2ban status check failed"; exit 1)
        
        echo "Viewing fail2ban logs..."
        docker compose logs fail2ban || (echo "Error: Failed to view fail2ban logs"; exit 1)
        
    - name: Cleanup
      if: always()
      env:
        JUPYTER_TOKEN: order-of-ther-first-state
        JUPYTER_ENABLE_LAB: "yes"
        JUPYTER_ALLOW_ROOT: "yes"
        DAGSTER_HOME: /opt/dagster/dagster_home
        LOG_LEVEL: info
        AWS_ACCESS_KEY_ID: ${{ secrets.HETZNER_S3_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.HETZNER_S3_SECRET_KEY }}
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        S3_DATA_BUCKET: ${{ secrets.S3_DATA_BUCKET }}
      run: |
        echo "Cleaning up containers..."
        docker compose down -v || (echo "Error: Failed to clean up containers"; exit 1)
        
        echo "Pruning Docker system..."
        docker system prune -f || (echo "Error: Failed to prune Docker system"; exit 1)

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: test-containers
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v3
    
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
        if_key_exists: replace
        
    - name: Deploy to production
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        DEPLOY_PATH: /home/${{ secrets.SSH_USER }}/infrastructure
        JUPYTER_TOKEN: order-of-ther-first-state
        JUPYTER_ENABLE_LAB: "yes"
        JUPYTER_ALLOW_ROOT: "yes"
        DAGSTER_HOME: /opt/dagster/dagster_home
        LOG_LEVEL: info
        AWS_ACCESS_KEY_ID: ${{ secrets.HETZNER_S3_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.HETZNER_S3_SECRET_KEY }}
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        S3_DATA_BUCKET: ${{ secrets.S3_DATA_BUCKET }}
      run: |
        echo "Creating deployment script..."
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        cd $DEPLOY_PATH

        # Ensure .env file exists and is not in git
        touch .env
        echo '.env' >> .gitignore

        # Create .env with configuration
        cat > .env << EOFENV
        JUPYTER_TOKEN=order-of-ther-first-state
        JUPYTER_ENABLE_LAB=yes
        JUPYTER_ALLOW_ROOT=yes
        DAGSTER_HOME=/opt/dagster/dagster_home
        LOG_LEVEL=info
        AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
        S3_BACKUP_BUCKET=${S3_BACKUP_BUCKET}
        S3_DATA_BUCKET=${S3_DATA_BUCKET}
        EOFENV

        # Create required Docker networks
        echo "Creating Docker networks..."
        docker network create proxy || true
        docker network create my_network || true

        # Create required Docker volumes
        echo "Creating Docker volumes..."
        docker volume create searxng_config || true
        docker volume create jupyter_data || true
        docker volume create dagster_data || true

        # Create network and volume configuration
        cat > docker-compose.override.yml << EOL
        networks:
          my_network:
            external: true
          proxy:
            external: true
        volumes:
          searxng_config:
            external: true
          jupyter_data:
            external: true
          dagster_data:
            external: true
        EOL

        # Pull latest code without overwriting .env
        git stash -u
        git pull origin main
        git stash pop || true

        # Update containers
        docker compose pull
        docker compose -f docker-compose.yml -f docker-compose.fail2ban.yml -f docker-compose.override.yml down
        docker compose -f docker-compose.yml -f docker-compose.fail2ban.yml -f docker-compose.override.yml up -d

        # Cleanup
        docker system prune -f
        EOF

        chmod +x deploy.sh
        
        echo "Copying deployment script to production server..."
        scp -o StrictHostKeyChecking=no deploy.sh $SSH_USER@$SSH_HOST:$DEPLOY_PATH/ || (echo "Error: Failed to copy deployment script"; exit 1)
        
        echo "Executing deployment script..."
        ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cd $DEPLOY_PATH && ./deploy.sh" || (echo "Error: Deployment script failed"; exit 1)
        
    - name: Verify deployment
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        DEPLOY_PATH: /home/${{ secrets.SSH_USER }}/infrastructure
      run: |
        echo "Verifying deployment..."
        ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cd $DEPLOY_PATH && \
          # Create required networks
          docker network create proxy || true && \
          docker network create my_network || true && \
          # Check deployment status
          docker compose ps && \
          docker compose logs --tail=50 && \
          echo 'Checking service health...' && \
          for service in \$(docker compose ps --services); do
            echo \"Checking \$service...\"
            docker compose ps \$service | grep -q \"healthy\" || (echo \"Error: Service \$service is not healthy\"; exit 1)
          done" || (echo "Error: Deployment verification failed"; exit 1)

    - name: Notify on failure
      if: failure()
      run: |
        echo "Deployment failed! Check the logs for details."
        exit 1

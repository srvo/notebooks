name: Infrastructure CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-configs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Validate Docker Compose files
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.fail2ban.yml config
        
    - name: Validate Traefik config
      run: |
        docker run -v ${{ github.workspace }}/traefik:/etc/traefik:ro traefik:v2.10 traefik validate --check

  test-containers:
    runs-on: ubuntu-latest
    needs: validate-configs
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Create test environment
      run: |
        # Create required directories and files
        mkdir -p nginx/certs cloudflared
        touch .env
        echo "JUPYTER_TOKEN=test-token" >> .env
        echo "TUNNEL_TOKEN=${{ secrets.CF_TUNNEL_TOKEN }}" >> .env
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> .env
        
    - name: Build and test containers
      run: |
        docker-compose -f docker-compose.yml up -d
        docker-compose ps
        sleep 30 # Wait for services to initialize
        
    - name: Test service health
      run: |
        # Test Jupyter
        curl -f http://localhost:8888/api/status || exit 1
        
        # Test Dagster
        curl -f http://localhost:3000/health || exit 1
        
        # Test SearXNG
        curl -f http://localhost:8889/status || exit 1
        
    - name: Run security scans
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
        
    - name: Test fail2ban integration
      run: |
        docker-compose -f docker-compose.fail2ban.yml up -d
        sleep 10
        # Test fail2ban status
        docker-compose exec -T fail2ban fail2ban-client status
        # Check logs
        docker-compose logs fail2ban
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: test-containers
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to production
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
      run: |
        scp -r ./* $SSH_USER@$SSH_HOST:/home/$SSH_USER/infrastructure/
        ssh $SSH_USER@$SSH_HOST 'cd /home/$SSH_USER/infrastructure && \
          docker-compose -f docker-compose.yml -f docker-compose.fail2ban.yml down && \
          docker-compose -f docker-compose.yml -f docker-compose.fail2ban.yml up -d'
          
    - name: Verify deployment
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
      run: |
        ssh $SSH_USER@$SSH_HOST 'cd /home/$SSH_USER/infrastructure && \
          docker-compose ps && \
          docker-compose logs --tail=100'
